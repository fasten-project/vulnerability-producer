/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.vulnerabilityproducer;

import com.mongodb.client.MongoDatabase;
import eu.fasten.vulnerabilityproducer.utils.connections.MongoConnector;

import java.io.IOException;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import picocli.CommandLine;

/**
 * Makes vulnerability-plugin module runnable from command line.
 */
@CommandLine.Command(name = "Vulnerability")
public class Main implements Runnable {

    private static final Logger logger = LoggerFactory.getLogger(Main.class);

    @CommandLine.Option(names = {"-f", "--json_file"},
            paramLabel = "jsonPath",
            description = "Path to JSON file with the data")
    String jsonPath;

    @CommandLine.Option(names = {"-po", "--plugin_output"},
            paramLabel = "pathToMount",
            description = "Path to mount folder to store the information",
            defaultValue = "/mnt/fasten")
    String mnt;

    @CommandLine.Option(names = {"-kt", "--kafka_topic"},
            paramLabel = "kafkaTopic",
            description = "Kafka topic where the producer will produce",
            defaultValue = "fasten.vulnerability.out")
    String kafkaTopic;

    @CommandLine.Option(names = {"-k", "--kafka_server"},
            paramLabel = "server.name:port",
            description = "Kafka server to connect to. Use multiple times for clusters.",
            defaultValue = "localhost:9092")
    List<String> kafkaServers;

    @CommandLine.Option(names = {"-m", "--mongodb"},
            paramLabel = "mongodb.connection",
            description = "MongoDB connection string")
    String mongoConnectionString;

    @CommandLine.Option(names = {"-u", "--update"},
            description = "If included, the VulnerabilityProducer will go straight to updater")
    boolean update;

    @CommandLine.Option(names = {"-i", "--infer"},
            paramLabel  = "inferStrategy",
            description = "Infer strategy to use. " +
                          "none      : no guessing of PURLs is performed " +
                          "repo2purl : guessing PURLs from the repository information detected" +
                          "cpe2purl  : guessing PURLs from the CPE information detected" +
                          "both      : use both strategies to guess PURLs",
            defaultValue = "both")
    String inferStrategy;

    public static void main(String[] args) {
        final int exitCode = new CommandLine(new Main()).execute(args);
        System.exit(exitCode);
    }

    @Override
    public void run() {
        var vulnProducer = new VulnerabilityProducer();

        // Setup mount
        vulnProducer.setPathToMnt(mnt);

        // Setup KafkaProducer
        logger.info("Setting up Kafka Producer");
        vulnProducer.setServerAddresses(kafkaServers);
        vulnProducer.setKafkaTopic(kafkaTopic);
        vulnProducer.createKafkaProducer();

        if (jsonPath != null) {
            // Directly produce the vulnerabilities to the kafka topic
            logger.info("Publishing vulnerabilities found in the JSON");
            vulnProducer.getVulnerabilitiesFromJson(jsonPath);
        } else {
            if (System.getenv("FASTEN_MONGOPASS") == null) {
                logger.error("Cannot find FASTEN_MONGOPASS env variable.");
                return;
            }

            if (System.getenv("FASTEN_GHTOKEN") == null) {
                logger.error("Cannot find FASTEN_GHTOKEN env variable.");
                return;
            }

            MongoDatabase mdb = null;
            if (mongoConnectionString != null) {
                logger.info("Connecting to MongoDatabase");
                try {
                    mdb = MongoConnector.getMongoCollection(mongoConnectionString);
                } catch (Exception e) {
                    logger.error("GHTorrent unavailable or connection string is incorrect, proceeding without it");
                }
            }
            vulnProducer.setMongoDatabase(mdb);

            // Starting the producer
            logger.info("Starting the producer");
            try {
                if (!(inferStrategy.equals("both")  ||
                    inferStrategy.equals("repo2purl") ||
                    inferStrategy.equals("cpe2purl")  ||
                    inferStrategy.equals("none"))) {
                    logger.error("Infer strategy not supported.");
                }
                vulnProducer.start(update, inferStrategy);
            } catch (IOException e) {
                logger.error("Could not start producer: ", e);
            }
        }
    }
}
