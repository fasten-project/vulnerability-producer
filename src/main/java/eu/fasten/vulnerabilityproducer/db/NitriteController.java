/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.vulnerabilityproducer.db;

import eu.fasten.vulnerabilityproducer.utils.Vulnerability;
import org.dizitart.no2.Nitrite;
import org.dizitart.no2.objects.ObjectRepository;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.Optional;
import java.util.concurrent.TimeUnit;

import static org.dizitart.no2.objects.filters.ObjectFilters.eq;

public class NitriteController {

    private Nitrite db;
    private ObjectRepository<PatchObject> patchRepository;
    private ObjectRepository<VulnerabilityObject> vulnerabilityRepository;

    /**
     * This Controller handles all the interaction with the Nitrite instance.
     * @param nitriteInstance - path to Create the db file
     */
    public NitriteController(String nitriteInstance) throws IOException {
        Files.createDirectories(Path.of(nitriteInstance).getParent());
        // Initialization
        this.db = Nitrite.builder()
                .compressed()
                .filePath(nitriteInstance)
                .openOrCreate();

        // Create a Patch Repository
        this.patchRepository = db.getRepository(PatchObject.class);
        // Create a Vulnerability Repository
        this.vulnerabilityRepository = db.getRepository(VulnerabilityObject.class);
    }

    /**
     * Inserts a Vulnerability Instance
     *
     * @param data - Vulnerability to insert
     */
    public void insertVulnerability(Vulnerability data) {
        VulnerabilityObject vo = new VulnerabilityObject();
        vo.setId(data.getId());
        vo.setVulnerability(data);

        vulnerabilityRepository.insert(vo);
    }

    /**
     * Inserts a Patch Instance
     *
     * @param patch - Patch to insert
     */
    public void insertPatch(PatchObject patch) {
        patchRepository.insert(patch);
    }

    /**
     * Looks for a Vulnerability Entry and returns it if it finds it.
     *
     * @param id of the vulnerability
     * @return Optional Vulnerability
     */
    public Optional<Vulnerability> findVulnerabilityEntry(String id) {
        VulnerabilityObject vo = vulnerabilityRepository.find(eq("id", id)).firstOrDefault();
        if (vo != null) {
            return Optional.of(vo.getVulnerability());
        } else {
            return Optional.empty();
        }
    }

    /**
     * Looks for a Patch Entry in the Nitrite Collection
     *
     * @param reference - link to the reference to be parsed
     * @return Optionally a HashSet of Files with what was changed
     */
    public Optional<HashSet<Vulnerability.Patch>> findPatchEntry(String reference) {
        PatchObject po = patchRepository.find(eq("patchURL", reference)).firstOrDefault();
        if (po != null) {
            return Optional.of(po.getFilesChanged());
        } else {
            return Optional.empty();
        }
    }

    /**
     * Computes how many days passed since the last modification of the Nitrite DB.
     *
     * @return long with the number of days.
     */
    public Long getDaysSinceModification(String pathToNitrite) {
        File check = new File(pathToNitrite);
        if (check.exists()) {
            SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
            Date dbLastModified = null;
            try {
                dbLastModified = sdf.parse(sdf.format(check.lastModified()));
            } catch (ParseException e) {
                e.printStackTrace();
            }
            Date today = new Date();

            long diffInMillies = Math.abs(dbLastModified.getTime() - today.getTime());
            long diff = TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);

            return diff;
        } else {
            return null;
        }
    }
}
