/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.vulnerabilityproducer.utils;

import com.google.gson.Gson;
import eu.fasten.vulnerabilityproducer.utils.mappers.Severity;

import java.io.Serializable;
import java.util.*;

public class Vulnerability implements Serializable {

    public static class Patch implements Serializable {
        private String fileName;
        private String patchDate;
        private List<Integer> lineNumbers;


        /**
         * Empty Constructor for Serialization
         */
        public Patch() {
            this.lineNumbers = new ArrayList<>();
        }

        public Patch(String fileName, List<Integer> lineNumbers) {
            this.fileName = fileName;
            this.lineNumbers = lineNumbers;
        }

        /**
         * Patch class constructor.
         *
         * @param fileName  - of the file that was changed
         * @param patchDate - date when the file was modified
         */
        public Patch(String fileName, String patchDate) {
            this.fileName = fileName;
            this.lineNumbers = new ArrayList<>();
            this.patchDate = patchDate;
        }

        public Patch(String fileName, String patchDate, List<Integer> lineNumbers) {
            this.fileName = fileName;
            this.patchDate = patchDate;
            this.lineNumbers = lineNumbers;
        }

        public String getFileName() {
            return fileName;
        }

        public void setFileName(String fileName) {
            this.fileName = fileName;
        }

        public List<Integer> getLineNumbers() {
            return lineNumbers;
        }

        public void addLineNumber(int lineNumber) {
            this.lineNumbers.add(lineNumber);
        }

        public void setLineNumbers(List<Integer> lineNumbers) {
            this.lineNumbers = lineNumbers;
        }

        public String getPatchDate() {
            return patchDate;
        }

        public void setPatchDate(String patchDate) {
            this.patchDate = patchDate;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Patch patch = (Patch) o;
            return fileName.equals(patch.fileName) &&
                    Objects.equals(patchDate, patch.patchDate) &&
                    lineNumbers.equals(patch.lineNumbers);
        }

        @Override
        public int hashCode() {
            return Objects.hash(fileName, patchDate, lineNumbers);
        }

        @Override
        public String toString() {
            return "Patch{" +
                    "fileName='" + fileName + '\'' +
                    ", patchDate='" + patchDate + '\'' +
                    ", lineNumbers=" + lineNumbers +
                    '}';
        }
    }

    private String id;
    private HashSet<String> purls;
    private Double scoreCVSS2;
    private Double scoreCVSS3;
    private Severity severity;

    private String publishedDate;
    private String lastModifiedDate;

    private String description;
    private HashSet<String> references;
    private HashSet<String> patchLinks;
    private HashSet<String> exploits;
    private HashSet<Patch> patches;

    /**
     * Empty Constructor for Serialization
     */
    public Vulnerability() {
        this.purls = new HashSet<>();
        this.references = new HashSet<>();
        this.patches = new HashSet<>();
        this.patchLinks = new HashSet<>();
        this.exploits = new HashSet<>();
    }

    /**
     * Constructor for a Vulnerability Object.
     *
     * @param id - takes a String ID
     */
    public Vulnerability(String id) {
        this.id = id;
        this.purls = new HashSet<>();
        this.references = new HashSet<>();
        this.patches = new HashSet<>();
        this.patchLinks = new HashSet<>();
        this.exploits = new HashSet<>();
    }

    public String getId() {
        return id;
    }

    public Double getScoreCVSS2() {
        return scoreCVSS2;
    }

    public void setScoreCVSS2(Double scoreCVSS2) {
        this.scoreCVSS2 = scoreCVSS2;
    }

    public Double getScoreCVSS3() {
        return scoreCVSS3;
    }

    public void setScoreCVSS3(Double scoreCVSS3) {
        this.scoreCVSS3 = scoreCVSS3;
    }

    public String getPublishedDate() {
        return publishedDate;
    }

    public void setPublishedDate(String publishedDate) {
        this.publishedDate = publishedDate;
    }

    public String getLastModifiedDate() {
        return lastModifiedDate;
    }

    public void setLastModifiedDate(String lastModifiedDate) {
        this.lastModifiedDate = lastModifiedDate;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public HashSet<String> getReferences() {
        return this.references;
    }

    public void addReference(String url) {
        this.references.add(url);
    }

    public HashSet<String> getPatchLinks() {
        return patchLinks;
    }

    public void addExploit(String url) {
        this.exploits.add(url);
    }

    public HashSet<String> getExploits() {
        return exploits;
    }

    public void addPatchLink(String url) {
        this.patchLinks.add(url);
    }

    public void addPatch(Patch p) {
        this.patches.add(p);
    }

    public HashSet<Patch> getPatches() {
        return patches;
    }

    public void addPurl(String purl) {
        this.purls.add(purl);
    }

    public HashSet<String> getPurls() {
        return purls;
    }

    public Severity getSeverity() {
        return severity;
    }

    public void setSeverity(Severity severity) {
        this.severity = severity;
    }

    // Extra Setters and Getters for Serializability

    public void setPatchLinks(HashSet<String> patchLinks) {
        this.patchLinks = patchLinks;
    }

    public void setPatches(HashSet<Patch> patches) {
        this.patches = patches;
    }

    public void setId(String id) {
        this.id = id;
    }

    public void setPurls(HashSet<String> purls) {
        this.purls = purls;
    }

    public void setReferences(HashSet<String> references) {
        this.references = references;
    }

    public void setExploits(HashSet<String> exploits) {
        this.exploits = exploits;
    }

    @Override
    public String toString() {
        return "Vulnerability{" +
                "id='" + id + '\'' +
                ", purls=" + purls +
                ", scoreCVSS2=" + scoreCVSS2 +
                ", scoreCVSS3=" + scoreCVSS3 +
                ", severity=" + severity +
                ", published_date='" + publishedDate + '\'' +
                ", last_modified_date='" + lastModifiedDate + '\'' +
                ", description='" + description + '\'' +
                ", references=" + references +
                ", patch_links=" + patchLinks +
                ", exploits=" + exploits +
                ", patches=" + patches.toString() +
                '}';
    }

    /**
     * JSON Representation of the Vulnerability using GSON.
     *
     * @return String JSON
     */
    public String toJson() {
        Gson gson = new Gson();
        return gson.toJson(this);
    }

    /**
     * Merges the vulnerability object with another one
     *
     * @param v2 - vulnerability to merge with
     */
    public void merge(Vulnerability v2) {
        assert this.getId().equals(v2.getId());
        this.getPurls().addAll(v2.getPurls());
        this.getReferences().addAll(v2.getReferences());
        this.getPatches().addAll(v2.getPatches());
        this.getExploits().addAll(v2.getExploits());
        this.getPatchLinks().addAll(v2.getPatchLinks());
        this.getPatches().addAll(v2.getPatches());
        if (v2.description != null && this.description != null) {
            if (v2.getDescription().length() > this.getDescription().length()) {
                this.setDescription(v2.getDescription());
            }
        }
        // Severity
        if (this.severity == null) {
            if (v2.severity != null) {
                this.setSeverity(v2.severity);
            }
        }
        // Score CVSS2
        if (this.scoreCVSS2 == null) {
            if (v2.scoreCVSS2 != null) {
                this.setScoreCVSS2(v2.scoreCVSS2);
            }
        }
        // Score CVSS3
        if (this.scoreCVSS3 == null) {
            if (v2.scoreCVSS3 != null) {
                this.setScoreCVSS3(v2.scoreCVSS3);
            }
        }
        // Published Date
        if (this.publishedDate == null) {
            if (v2.publishedDate != null) {
                this.setPublishedDate(v2.publishedDate);
            }
        }
        // Last Modified Date
        if (this.lastModifiedDate == null) {
            if (v2.lastModifiedDate != null) {
                this.setLastModifiedDate(v2.lastModifiedDate);
            }
        }
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Vulnerability that = (Vulnerability) o;
        return id.equals(that.id) &&
                Objects.equals(purls, that.purls) &&
                Objects.equals(scoreCVSS2, that.scoreCVSS2) &&
                Objects.equals(scoreCVSS3, that.scoreCVSS3) &&
                severity == that.severity &&
                Objects.equals(publishedDate, that.publishedDate) &&
                Objects.equals(lastModifiedDate, that.lastModifiedDate) &&
                Objects.equals(description, that.description) &&
                Objects.equals(references, that.references) &&
                Objects.equals(patchLinks, that.patchLinks) &&
                Objects.equals(exploits, that.exploits) &&
                Objects.equals(patches, that.patches);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }
}


