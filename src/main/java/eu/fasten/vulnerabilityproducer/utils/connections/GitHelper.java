/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.vulnerabilityproducer.utils.connections;

import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.GitAPIException;

import java.nio.file.Paths;

/**
 * Tiny class to move the responsibility of handling GitHub cloning.
 * Allows better testing and reduces code duplication
 */
public class GitHelper {

    /**
     * Clones a repository from GitHub.
     * Gives the option to check out a branch
     * @param repoUrl - HTTPS clone link
     * @param pathDir - Path where to clone the repo
     * @param branch - Branch to checkout
     * @return String with the path where it was cloned.
     */
    public String cloneRepo(String repoUrl, String pathDir, String branch) {
        try {
            if (branch != null) {
                Git git = Git.cloneRepository()
                        .setURI(repoUrl)
                        .setDirectory(Paths.get(pathDir).toFile())
                        .setCloneAllBranches(true)
                        .call();
                git.checkout().setName(branch).call();
            } else {
                Git git = Git.cloneRepository()
                        .setURI(repoUrl)
                        .setDirectory(Paths.get(pathDir).toFile())
                        .call();
            }
        } catch (GitAPIException e) {
            e.printStackTrace();
        }
        return pathDir;
    }
}
