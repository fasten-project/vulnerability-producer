/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.vulnerabilityproducer.utils.connections;

import eu.fasten.vulnerabilityproducer.utils.PatchFinder;
import org.jooq.tools.json.JSONArray;
import org.jooq.tools.json.JSONObject;
import org.jooq.tools.json.JSONParser;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class GitHubAPI {
    JavaHttpClient httpClient;
    String token;
    JSONParser jsonParser;

    public GitHubAPI(JavaHttpClient httpClient, String token, JSONParser jsonParser) {
        this.httpClient = httpClient;
        this.token = token;
        this.jsonParser = jsonParser;
    }

    /**
     * Uses API v4 to retrieve Merged Pull Requests that mention the issue under inspection
     * @param repoOwner - Owner of the repo
     * @param repoName - Name of the repo
     * @param issueNumber - Issue number
     * @return - list of String ids of those PRs
     */
    public List<String> getPRsMentioningIssue(String repoOwner,
                                              String repoName,
                                              String issueNumber) {
        List<String> mergeCommits = new ArrayList<>();
        var query = "query {\n" +
                "  repository(owner: \""+ repoOwner +"\", name: \"" + repoName +"\") {\n" +
                "    issue(number: " + issueNumber + ") {\n" +
                "      timelineItems(first: 100) {\n" +
                "        nodes {\n" +
                "          ... on ClosedEvent {\n" +
                "            closer {\n" +
                "              ... on PullRequest {\n" +
                "                number\n" +
                "                title\n" +
                "                mergeCommit {\n" +
                "                  url\n" +
                "                }\n" +
                "              }\n" +
                "            }\n" +
                "          }\n" +
                "        }\n" +
                "      }\n" +
                "    }\n" +
                "  }\n" +
                "}";
        HashMap<String, String> values = new HashMap<>();
        values.put("query", query);
        try {
            String jsonIssue = httpClient.sendPost("https://api.github.com/graphql", token, values);
            // Parse the json response
            JSONObject payload = (JSONObject) jsonParser.parse(jsonIssue);
            JSONObject data = (JSONObject) payload.get("data");
            if (data.get("repository") == null) return mergeCommits;
            JSONObject repository = (JSONObject) data.get("repository");
            if (repository.get("issue") == null)    return mergeCommits;
            JSONArray nodes = (JSONArray) ((JSONObject) ((JSONObject) repository.get("issue")).get("timelineItems")).get("nodes");
            for (Object nodeObj : nodes) {
                var node = (JSONObject) nodeObj;
                if (node.get("closer") != null) {
                    // Grab number of the PR
                    var closer = (JSONObject) node.get("closer");
                    if (closer.get("mergeCommit") != null) {
                        var mergeCommitObj = (JSONObject) closer.get("mergeCommit");
                        if (mergeCommitObj.get("url") != null) {
                            var mergingCommit = mergeCommitObj.get("url").toString();
                            // Filter only commits belonging to the repo
                            if (mergingCommit.contains(repoOwner + "/" + repoName)) {
                                mergeCommits.add(mergingCommit);
                            }
                        }
                    }
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return mergeCommits;
    }

    /**
     * Looks for the commit closing a GitHub issue.
     * @param repoOwner - Owner of the repo
     * @param repoName - Name of the repo
     * @param issueNumber - Issue number
     * @return - web url link to the commit.
     */
    public String getCommitClosingIssue(String repoOwner,
                                        String repoName,
                                        String issueNumber) {
        String commitRef = null;
        var query = "query {\n" +
                "  repository(owner: \""+ repoOwner +"\", name: \"" + repoName +"\") {\n" +
                "    issue(number: " + issueNumber + ") {\n" +
                "      timelineItems(first: 100) {\n" +
                "        nodes {\n" +
                "          ... on ClosedEvent {\n" +
                "            closer {\n" +
                "              ... on Commit {\n" +
                "                commitUrl\n" +
                "              }\n" +
                "            }\n" +
                "          }\n" +
                "        }\n" +
                "      }\n" +
                "    }\n" +
                "  }\n" +
                "}";
        HashMap<String, String> values = new HashMap<>();
        values.put("query", query);
        try {
            String jsonIssue = httpClient.sendPost("https://api.github.com/graphql", token, values);
            // Parse the json response
            JSONObject payload = (JSONObject) jsonParser.parse(jsonIssue);
            JSONObject data = (JSONObject) payload.get("data");
            if (data.get("repository") == null) return commitRef;
            JSONObject repository = (JSONObject) data.get("repository");
            if (repository.get("issue") == null)    return commitRef;
            JSONArray nodes = (JSONArray) ((JSONObject) ((JSONObject) repository.get("issue")).get("timelineItems")).get("nodes");
            for (Object nodeObj : nodes) {
                var node = (JSONObject) nodeObj;
                if (node.get("closer") != null) {
                    // Grab number of the PR
                    var closer = (JSONObject) node.get("closer");
                    if (closer.get("commitUrl") != null) {
                        commitRef = ((JSONObject) node.get("closer")).get("commitUrl").toString();
                    }
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return commitRef;
    }

    /**
     * Retrieves commits referencing issues.
     * @param repoOwner - Owner of the repo
     * @param repoName - Name of the repo
     * @param issueNumber - Issue number
     * @return - list of String ids of those PRs
     */
    public List<String> getCommitsReferencingIssue(String repoOwner,
                                                   String repoName,
                                                   String issueNumber) {
        List<String> commitsRef = new ArrayList<>();
        var query = "query {\n" +
                "  repository(owner: \""+ repoOwner +"\", name: \"" + repoName +"\") {\n" +
                "    issue(number: " +issueNumber + ") {\n" +
                "      timelineItems(first: 100) {\n" +
                "        nodes {\n" +
                "          ... on ReferencedEvent {\n" +
                "            commit {\n" +
                "              commitUrl\n" +
                "            }\n" +
                "          }\n" +
                "        }\n" +
                "      }\n" +
                "    }\n" +
                "  }\n" +
                "}";
        HashMap<String, String> values = new HashMap<>();
        values.put("query", query);
        try {
            String jsonIssue = httpClient.sendPost("https://api.github.com/graphql", token, values);
            // Parse the json response
            JSONObject payload = (JSONObject) jsonParser.parse(jsonIssue);
            JSONObject data = (JSONObject) payload.get("data");
            if (data.get("repository") == null) return commitsRef;
            JSONObject repository = (JSONObject) data.get("repository");
            if (repository.get("issue") == null)    return commitsRef;
            JSONArray nodes = (JSONArray) ((JSONObject) ((JSONObject) repository.get("issue")).get("timelineItems")).get("nodes");
            for (Object nodeObj : nodes) {
                var node = (JSONObject) nodeObj;
                if (node.get("commit") != null) {
                    // Grab number of the PR
                    var closer = (JSONObject) node.get("commit");
                    if (closer.get("commitUrl") != null) {
                        var commitUrl = ((JSONObject) node.get("commit")).get("commitUrl").toString();
                        if (commitUrl.contains("/" + repoOwner + "/" + repoName + "/")) {
                            commitsRef.add(commitUrl);
                        }
                    }
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return commitsRef;
    }

    /**
     * Retrieves references made in comments of the issue to PRs or Commits of the same repo.
     * @param repoOwner - Owner of the repo
     * @param repoName - Name of the repo
     * @param issueNumber - Issue number
     * @return - list of String ids of those PRs
     */
    public List<String> getReferencesInIssueComments(String repoOwner, String repoName, String issueNumber) {
        List<String> refLinks = new ArrayList<>();
        var query = "query {\n" +
                "  repository(owner: \""+ repoOwner +"\", name: \"" + repoName +"\") {\n" +
                "    issue(number: " +issueNumber + ") {\n" +
                "      timelineItems(first: 100) {\n" +
                "        nodes {\n" +
                "          ... on IssueComment {\n" +
                "            body\n" +
                "          }\n" +
                "        }\n" +
                "      }\n" +
                "    }\n" +
                "  }\n" +
                "}";
        HashMap<String, String> values = new HashMap<>();
        values.put("query", query);
        try {
            String jsonIssue = httpClient.sendPost("https://api.github.com/graphql", token, values);
            // Parse the json response
            JSONObject payload = (JSONObject) jsonParser.parse(jsonIssue);
            JSONObject data = (JSONObject) payload.get("data");
            if (data.get("repository") == null) return refLinks;
            JSONObject repository = (JSONObject) data.get("repository");
            if (repository.get("issue") == null)    return refLinks;
            JSONArray nodes = (JSONArray) ((JSONObject) ((JSONObject) repository.get("issue")).get("timelineItems")).get("nodes");
            for (Object nodeObj : nodes) {
                var node = (JSONObject) nodeObj;
                if (node.get("body") != null) {
                    // Grab potential links
                    var links = PatchFinder.findPatchLinks(node.get("body").toString());
                    for (String ref : links) {
                        if (ref.contains(repoOwner + "/" + repoName)) {
                            refLinks.add(ref);
                        }
                    }
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return refLinks;
    }
}
