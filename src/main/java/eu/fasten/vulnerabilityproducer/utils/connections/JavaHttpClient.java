/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.vulnerabilityproducer.utils.connections;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URI;
import java.net.URL;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.HashMap;
import java.util.HashSet;

public class JavaHttpClient {

    private final Logger logger = LoggerFactory.getLogger(JavaHttpClient.class.getName());
    private final static Duration connectTimeout = Duration.ofSeconds(5);
    private final static Duration getRequestTimeout = Duration.ofSeconds(10);
    private final static Duration postRequestTimeout = Duration.ofSeconds(30);

    public static final HttpClient httpClient = HttpClient.newBuilder()
            .followRedirects(HttpClient.Redirect.ALWAYS)
            .connectTimeout(connectTimeout)
            .version(HttpClient.Version.HTTP_2)
            .build();

    public String sendGet(String url) {
        return sendGet(url, null);
    }

    public String sendGet(String url, String authToken) {
        var builder = HttpRequest.newBuilder()
                .GET()
                .uri(URI.create(url))
                .timeout(getRequestTimeout)
                .setHeader("User-Agent", "Java 11 HttpClient Bot");

        if(authToken != null) {
            builder = builder.setHeader("Authorization", "token " + authToken);
        }

        try {
            var response = httpClient.send(builder.build(),
                    HttpResponse.BodyHandlers.ofString());
            if(response.statusCode() == HttpURLConnection.HTTP_OK) {
                return response.body();
            }
            else {
                logger.warn("Status code " + response.statusCode() + " for GET request of " + url);
            }
        } catch (IOException | InterruptedException e) {
            logger.error("Error while sending GET request for URL " + url + "\n" + e);
        }
        return "";
    }

    public String sendPost(String url, String token, HashMap<String, String> values) throws JsonProcessingException {
        var objectMapper = new ObjectMapper();
        var requestBody = objectMapper.writeValueAsString(values);

        var client = HttpClient.newHttpClient();
        var request = HttpRequest.newBuilder()
                .uri(URI.create(url))
                .POST(HttpRequest.BodyPublishers.ofString(requestBody))
                .timeout(postRequestTimeout)
                .setHeader("Authorization", "token " + token)
                .build();

        try {
            var response = client.send(request,
                    HttpResponse.BodyHandlers.ofString());
            if(response.statusCode() == HttpURLConnection.HTTP_OK) {
                return response.body();
            }
            else {
                logger.warn("Status code " + response.statusCode() + " for GET of " + url);
            }
        } catch (IOException | InterruptedException e) {
            logger.error("Error while sending POST request for URL " + url + "\n" + e);
        }
        return "";
    }

    /**
     * Validates whether the url is valid and looks for redirects.
     * @param url - ref to check
     * @param refSet - set of references already seen
     * @return ref to parse - null if ref is not valid
     */
    public String validateAndRedirect(String url, HashSet<String> refSet) {
        try {
            if (url == null)    return null;
            var con = (HttpURLConnection) new URL(url).openConnection();
            // Set timeouts to connect and read
            con.setConnectTimeout(3000);
            con.setReadTimeout(3000);
            con.setInstanceFollowRedirects(false);
            con.connect();
            con.getInputStream();

            if (con.getResponseCode() == HttpURLConnection.HTTP_MOVED_PERM || con.getResponseCode() == HttpURLConnection.HTTP_MOVED_TEMP) {
                refSet.add(url);
                var redirectUrl = con.getHeaderField("Location");
                // Prevent circular redirects
                return refSet.contains(redirectUrl) ? null : validateAndRedirect(redirectUrl, refSet);
            }
            return url;
        } catch (Exception e) {
            return null;
        }
    }
}
