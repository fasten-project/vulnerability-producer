/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.vulnerabilityproducer.utils.connections;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.jsoup.HttpStatusException;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URI;
import java.net.URL;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.stream.Collectors;

public class JavaHttpClient {

    public static final HttpClient httpClient = HttpClient.newBuilder()
            .followRedirects(HttpClient.Redirect.ALWAYS)
            .version(HttpClient.Version.HTTP_2)
            .build();

    /**
     * Sends GET request to specified URL.
     *
     * @return the response body
     */
    public String sendGet(String url) {
        try {
            HttpRequest request;
            if (System.getenv("FASTEN_GHTOKEN") != null) {
                request = HttpRequest.newBuilder()
                        .GET()
                        .uri(URI.create(url))
                        .setHeader("User-Agent", "Java 11 HttpClient Bot")
                        .setHeader("Authorization", "token " + System.getenv("FASTEN_GHTOKEN"))
                        .timeout(Duration.ofSeconds(5))
                        .build();
            } else {
                request = HttpRequest.newBuilder()
                        .GET()
                        .uri(URI.create(url))
                        .setHeader("User-Agent", "Java 11 HttpClient Bot")
                        .timeout(Duration.ofSeconds(5))
                        .build();
            }

            HttpResponse<String> response;
            try {
                response = httpClient.send(request,
                        HttpResponse.BodyHandlers.ofString());
            } catch (IOException | InterruptedException e) {
                try {
                    URL urlObj = new URL(url);
                    BufferedReader reader = new BufferedReader(new InputStreamReader(urlObj.openStream(), StandardCharsets.UTF_8));
                    return reader.lines().collect(Collectors.joining("\n"));
                } catch (IOException ioe) {
                    return "";
                }
            }
            if(response.statusCode() != HttpURLConnection.HTTP_OK) {
                throw(new HttpStatusException(response.body(), response.statusCode(), url));
            }
            return response.body();
        } catch (Exception e) {
            return "";
        }
    }

    public String sendPost(String url, String token, HashMap<String, String> values) throws Exception {
        var objectMapper = new ObjectMapper();
        String requestBody = objectMapper
                .writeValueAsString(values);

        HttpClient client = HttpClient.newHttpClient();
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(url))
                .setHeader("Authorization", "token " + token)
                .POST(HttpRequest.BodyPublishers.ofString(requestBody))
                .build();

        HttpResponse<String> response = client.send(request,
                HttpResponse.BodyHandlers.ofString());

        if(response.statusCode() != HttpURLConnection.HTTP_OK) {
            throw(new HttpStatusException(response.body(), response.statusCode(), url));
        }

        return response.body();
    }

    /**
     * Validates whether the url is valid and looks for redirects.
     * @param url - ref to check
     * @param refSet - set of references already seen
     * @return ref to parse - null if ref is not valid
     */
    public String validateAndRedirect(String url, HashSet<String> refSet) {
        try {
            if (url == null)    return null;
            var con = (HttpURLConnection) new URL(url).openConnection();
            // Set timeouts to connect and read
            con.setConnectTimeout(3000);
            con.setReadTimeout(3000);
            con.setInstanceFollowRedirects(false);
            con.connect();
            con.getInputStream();

            if (con.getResponseCode() == HttpURLConnection.HTTP_MOVED_PERM || con.getResponseCode() == HttpURLConnection.HTTP_MOVED_TEMP) {
                refSet.add(url);
                var redirectUrl = con.getHeaderField("Location");
                // Prevent circular redirects
                return refSet.contains(redirectUrl) ? null : validateAndRedirect(redirectUrl, refSet);
            }
            return url;
        } catch (Exception e) {
            return null;
        }
    }
}
