/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.vulnerabilityproducer.utils.mappers;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class Pool {
    private final HashMap<String, List<MutablePair>> mappings;

    /**
     * Constructor for a Pool.
     * @param maps - mappings extracted from the metadata of each ecosystem.
     * @param initialWeight - initial weight to give to those mappings.
     */
    public Pool(List<HashMap<String, String>> maps, int initialWeight) {
        var mappings = new HashMap<String, List<MutablePair>>();
        maps.forEach(map -> map.forEach((k, v) -> {
            var pairs = mappings.getOrDefault(k, new ArrayList<>());
            pairs.add(new MutablePair(v, initialWeight));
            mappings.put(k, pairs);
        }));
        this.mappings = mappings;
    }

    public HashMap<String, List<MutablePair>> getMappings() {
        return mappings;
    }

    /**
     * Inserts a new vote into the pool. If no correspondence is already stored, a new one is added.
     * Otherwise, the count is increased by 1 for the found match.
     * @param key - in our case is either the repo_url or the cpe.
     * @param value - the purl found to be corresponding to it.
     */
    public void insertVote(String key, String value) { // key = repo, value = purl
        if (mappings.containsKey(key)) {
            var pairs = mappings.get(key);
            var found = false;
            for (MutablePair pair : pairs) {
                if (pair.key.equals(value)) {
                    pair.value += 1;
                    found = true;
                }
            }
            if (!found) {
                pairs.add(new MutablePair(value, 1));
            }
        } else {
            var pairs = new ArrayList<MutablePair>(); pairs.add(new MutablePair(value, 1));
            mappings.put(key, pairs);
        }
    }

    /**
     * Finds the most voted match with the given key.
     * @param key - in our case is either the repo_url or the cpe.
     * @return the value in the pair with the most votes.
     */
    public String getMostVoted(String key) {
        if (!mappings.containsKey(key)) return key;
        var candidates = mappings.get(key);
        // extract the most voted. in the case of a tie, return the last one you stored
        String mostVoted = null;
        var maxVotes = 0;
        for (MutablePair candidate : candidates) {
            if (candidate.value > maxVotes) mostVoted = candidate.key;
        }
        return mostVoted;
    }
}
