/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.vulnerabilityproducer.utils.patches;

import eu.fasten.vulnerabilityproducer.utils.PatchFinder;
import eu.fasten.vulnerabilityproducer.utils.Vulnerability;
import eu.fasten.vulnerabilityproducer.utils.connections.JavaHttpClient;
import org.joda.time.DateTime;
import org.joda.time.format.ISODateTimeFormat;
import org.jooq.tools.json.JSONArray;
import org.jooq.tools.json.JSONObject;
import org.jooq.tools.json.JSONParser;
import org.jooq.tools.json.ParseException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.stream.Collectors;

public class BitBucketRanger {
    private final Logger logger = LoggerFactory.getLogger(BitBucketRanger.class.getName());
    JSONParser jsonParser;
    JavaHttpClient client;

    public BitBucketRanger(JavaHttpClient client, JSONParser jsonParser) {
        this.jsonParser = jsonParser;
        this.client = client;
    }

    /**
     * Injects information from a Bitbucket commit.
     * Simply adds /raw to the end of the ref.
     * @param ref - link to a Bitbucket commit
     * @return - set of patches
     */
    public HashSet<Vulnerability.Patch> parseBitBucketCommit(String ref) {
        logger.info("Parsing BitBucket commit with URL: " + ref);
        var commitInfo = ref.split("/");
        var project = commitInfo[3];
        var repo = commitInfo[4];
        var commitId = commitInfo[6];
        ref = "https://bitbucket.org/api/2.0/repositories/" + project + "/" + repo + "/commit/" + commitId;
        var commitJson = client.sendGet(ref);
        if (!commitJson.equals(" ") && !commitJson.contains("\"message\": \"Commit not found\",")) {
            JSONObject commitObj = null;
            try {
                commitObj = (JSONObject) jsonParser.parse(commitJson);
            } catch (ParseException e) {
                e.printStackTrace();
            }
            var date = new DateTime(commitObj.get("date").toString()).toString(ISODateTimeFormat.date());
            var diffLink = ref.replace("/commit/", "/diff/");
            var rawDiff = client.sendGet(diffLink);
            var diffPatches = DiffParser.getPatchesFromDiffs(rawDiff);
            diffPatches.stream().forEach(x -> x.setPatchDate(date));
            return diffPatches;
        }
        return null;
    }

    /**
     * Injects information from a Bitbucket pull-request.
     * Looks for the merging commit in the JSON.
     * @param ref - link to a Bitbucket pull-request
     * @return - set of patches
     */
    public HashSet<Vulnerability.Patch> parseBitBucketPullRequest(String ref) {
        logger.info("Parsing BitBucket pull request with URL: " + ref);
        var prInfo = ref.split("/");
        var project = prInfo[3];
        var repo = prInfo[4];
        var prId = prInfo[6];
        ref = "https://bitbucket.org/api/2.0/repositories/" + project + "/" + repo + "/pullrequests/" + prId;
        var prJson = client.sendGet(ref);
        if (!prJson.contains("Not Found")) {
            JSONObject prObj = null;
            try {
                prObj = (JSONObject) jsonParser.parse(prJson);
            } catch (ParseException e) {
                e.printStackTrace();
            }
            if (prObj.get("merge_commit") != null) {
                var mergeCommitObj = (JSONObject) prObj.get("merge_commit");
                var mergeCommitHash = mergeCommitObj.get("hash");
                var linkToCommit = "https://bitbucket.org/" + project
                        + "/" + repo + "/commits/" + mergeCommitHash;
                return PatchFinder.parseReference(linkToCommit);
            }
        }
        return null;
    }

    /**
     * Injects information from a Bitbucket issue.
     * Looks for attachments and comments that contain links to patches.
     * @param ref - link to a Bitbucket issue
     * @return - set of patches
     */
    public HashSet<Vulnerability.Patch> parseBitBucketIssue(String ref) {
        logger.info("Parsing BitBucket issue with URL: " + ref);
        HashSet<Vulnerability.Patch> patches = new HashSet<>();
        var prInfo = ref.split("/");
        var project = prInfo[3];
        var repo = prInfo[4];
        var issueNumber = prInfo[6];
        var refAttachments = "https://bitbucket.org/api/2.0/repositories/" + project + "/" + repo + "/issues/" + issueNumber + "/attachments";
        var refComments = "https://bitbucket.org/api/2.0/repositories/" + project + "/" + repo + "/issues/" + issueNumber + "/comments";
        try {
            // Parse attachments
            var issueAttachmentsJson = client.sendGet(refAttachments);
            if (!issueAttachmentsJson.contains("\"message\": \"No Issue matches the given query.\"")) {
                var issueAttachments = (JSONArray) ((JSONObject) jsonParser.parse(issueAttachmentsJson)).get("values");
                for (Object obj : issueAttachments) {
                    if (((JSONObject) obj).get("name").toString().contains(".patch")) {
                        // Get the link and parse the patch
                        var links = (JSONArray)
                                ((JSONObject)
                                        ((JSONObject)
                                                ((JSONObject) obj)
                                                        .get("links"))
                                                .get("self"))
                                        .get("href");
                        for (Object link : links) {
                            var patchInfoInFile = client.sendGet((String) link);
                            patches.addAll(DiffParser.getPatchesFromDiffs(patchInfoInFile));
                        }
                    }
                }
            }

            // Parse comments
            var issueCommentsJson = client.sendGet(refComments);
            if (!issueCommentsJson.contains("\"message\": \"No Issue matches the given query.\"")) {
                var issueComments = (JSONArray) ((JSONObject) jsonParser.parse(issueCommentsJson)).get("values");
                for (Object comment : issueComments) {
                    var content = ((JSONObject) ((JSONObject) comment).get("content")).get("raw");
                    var potentialPatches = PatchFinder.findPatchLinks(content.toString());
                    for (String pp : potentialPatches) {
                        var patch = PatchFinder.parseReference(pp);
                        if (patch != null)  patches.addAll(patch);
                    }
                }
            }
        } catch (ParseException e) {
            e.printStackTrace();
        }
        return patches;
    }
}
