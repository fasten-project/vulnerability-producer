/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.vulnerabilityproducer.utils.patches;

import eu.fasten.vulnerabilityproducer.utils.Patch;
import eu.fasten.vulnerabilityproducer.utils.connections.JavaHttpClient;
import org.jooq.tools.json.JSONArray;
import org.jooq.tools.json.JSONObject;
import org.jooq.tools.json.JSONParser;
import org.jooq.tools.json.ParseException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Base64;
import java.util.HashSet;

import static eu.fasten.vulnerabilityproducer.utils.PatchFinder.findPatchLinks;
import static eu.fasten.vulnerabilityproducer.utils.PatchFinder.parseReference;

public class BugzillaRanger extends GenericRanger {
    private final Logger logger = LoggerFactory.getLogger(BugzillaRanger.class.getName());

    public BugzillaRanger(JavaHttpClient httpClient, JSONParser jsonParser) {
        super(httpClient, jsonParser);
    }

    /**
     * Injects information taking it from Bugzilla bug.
     * The information is held into attachments.
     * @param ref - link to Bugzilla bug
     * @return - set of patches
     */
    public HashSet<Patch> parseBugzillaBug(String ref) {
        logger.info("Parsing Bugzilla Bug with URL: " + ref);
        // Validation URL and eventual cleanup
        if (ref.contains("#")) {
            ref = ref.split("#")[0];
            logger.info("Bugzilla URL cleaned: " + ref);
        }
        var patches = new HashSet<Patch>();
        var bugzillaServer = ref.split("/show_bug")[0];
        var bugInfo = ref.split("/show_bug\\.cgi\\?id=");
        if (bugInfo.length < 2) return patches;
        var bugAlias = bugInfo[1];
        // Extract bugId
        var bugInfoUrl = bugzillaServer + "/rest/bug/" + bugAlias;
        var bugInfoJson = httpClient.sendGet(bugInfoUrl);
        if (bugInfoJson.length() == 0 || bugInfoJson.contains("<!DOCTYPE html") || bugInfoJson.contains("<!DOCTYPE HTML") ||
                bugInfoJson.contains("\"message\":\"You are not authorized to access bug")) {
            return patches;
        }

        // Extract the bugId from the info
        String bugId = null;
        try {
            var bugObj = (JSONObject) jsonParser.parse(bugInfoJson);
            if (bugObj.get("bugs") == null) return patches;
            bugId = ((JSONObject) ((JSONArray) bugObj.get("bugs")).get(0)).get("id").toString();
        } catch (ParseException e) {
        logger.error("ParserException while parsing bugzilla bug: " + ref);
        }

        if (bugId == null)  return patches;
        var bugAttachmentsUrl = bugzillaServer + "/rest/bug/" + bugId + "/attachment";
        var bugCommentsUrl = bugzillaServer + "/rest/bug/" + bugId + "/comment";

        var responseJson = httpClient.sendGet(bugAttachmentsUrl);
        if (responseJson.length() == 0 || responseJson.contains("<!DOCTYPE html") || responseJson.contains("<!DOCTYPE HTML") ||
                responseJson.contains("\"message\":\"You are not authorized to access bug")) {
            return patches;
        }

        // Extract each of the attachments, if the contain a patch, parse it
        try {
            Object obj = jsonParser.parse(responseJson);
            JSONObject payload = (JSONObject) obj;
            if (payload == null || payload.get("bugs") == null)    return patches;
            JSONObject bugs = (JSONObject) payload.get("bugs");
            // Extract bugId
            bugId = ((JSONObject) payload.get("bugs")).keySet().iterator().next().toString();
            // bugId is not necessarily equal to the real underlying ID --> you need to extract it with more care
            if (bugs.get(bugId) == null)    return patches;
            JSONArray attachments = (JSONArray) bugs.get(bugId);

            if (attachments != null) {
                for (Object o : attachments) {
                    JSONObject attachment = (JSONObject) o;
                    if (attachment.get("is_patch").toString().equals("1")) {
                        // Get data in base 64 encoding
                        byte[] decodedBytes = Base64.getDecoder().decode((String) attachment.get("data"));
                        var patch = new String(decodedBytes);
                        try {
                            patches.addAll(DiffParser.getPatchesFromUnifiedDiff(patch));
                        } catch (Exception e) {
                            logger.error("Could not parse bugzilla bug: " + ref);
                        }
                    }
                }
            }
        } catch (ParseException e) {
            logger.error("ParserException while parsing bugzilla bug: " + ref);
        }

        // Looks for each comment, looks for patches, if found parses it
        // Keep a set to avoid any circular link
        var commentsJson = httpClient.sendGet(bugCommentsUrl);
        if (commentsJson.length() == 0 || commentsJson.contains("<!DOCTYPE html") || commentsJson.contains("<!DOCTYPE HTML") ||
                commentsJson.contains("\"message\":\"You are not authorized to access bug")) {
            return patches;
        }

        try {
            Object obj = jsonParser.parse(commentsJson);
            JSONObject payload = (JSONObject) obj;
            if (payload == null || payload.get("bugs") == null)    return patches;
            JSONObject bugs = (JSONObject) payload.get("bugs");
            if (bugs.get(bugId) == null)    return patches;
            JSONArray comments = (JSONArray) ((JSONObject) bugs.get(bugId)).get("comments");

            if (comments != null) {
                for (Object o : comments) {
                    JSONObject comment = (JSONObject) o;
                    if (comment.get("text") != null) {
                        var potentialPatches = findPatchLinks(comment.get("text").toString());
                        potentialPatches.forEach(p -> {
                            var patchFound = parseReference(p);
                            if (patchFound != null) patches.addAll(patchFound);
                        });
                    }
                }
            }
        } catch (ParseException e) {
            logger.error("ParserException while parsing bugzilla bug: " + ref);
        }

        return patches;
    }
}
