/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.vulnerabilityproducer.utils.patches;

import eu.fasten.vulnerabilityproducer.utils.Vulnerability;
import org.apache.commons.lang3.StringUtils;
import org.joda.time.DateTime;
import org.joda.time.format.ISODateTimeFormat;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

/**
 * Contains the different utilities used to handle diffs coming from different sources.
 */
public class DiffParser {

    /**
     * Takes a diff file as input and produces a set of patches to inject into the Vulnerability Object.
     * @param diffs - diffs of the patch to be parsed.
     * @return set of Patches
     */
    public static HashSet<Vulnerability.Patch> getPatchesFromDiffs(String diffs) {
        HashSet<Vulnerability.Patch> patches = new HashSet<>();
        String patchDate = null;
        String[] hunks = diffs.split("(\n|^)--- ");
        for (int i = 1; i < hunks.length; i++) {
            Vulnerability.Patch patch = new Vulnerability.Patch();
            var filename = hunks[i].split("\n")[0].split("\\t")[0].split("\\s")[0];
            if (filename.startsWith("a/"))  filename = filename.substring(2);
            // Processing a patch in a patch causes problems
            // TODO: Change the getPatchHunks method to handle this
            if (filename.endsWith(".patch")) {
                return patches;
            }
            patchDate = getPatchDate(hunks[i]);
            List<Integer> lineChanged = getPatchHunks(hunks[i]);
            // Fill in the patch
            patch.setFileName(filename);
            patch.setLineNumbers(lineChanged);
            patch.setPatchDate(patchDate);
            patches.add(patch);
        }
        return patches;
    }

    /**
     * Extracts the hunks from the commit information.
     *
     * @param patch     - String representing the patch information
     * @return
     */
    public static List<Integer> getPatchHunks(String patch) {
        List<Integer> linesAffected = new ArrayList<>();
        String[] linesPatch = patch.split("\n");
        for (int i = 0; i < linesPatch.length; i++) {
            String hunk = StringUtils.substringBetween(linesPatch[i], "@@", "@@");
            if (hunk != null) {
                String s = hunk.split("-")[1].split(" \\+")[0];
                if (s.contains(",")) s = s.substring(0, s.indexOf(","));

                String t = hunk.split("\\+")[1].split(",")[0];

                int fromLineNumber = Integer.parseInt(s.strip());
                int toLineNumber = Integer.parseInt(t.strip());

                // Check if the file was deleted (aka: toLineNumber is 0)
                if (toLineNumber == 0) continue;

                // Check if the file was created (aka: fromLineNumber is 0)
                if (fromLineNumber == 0) continue;

                // Go through the next lines looking for + or - and keep going until you find something different
                int j = i + 1;
                boolean currPatch = true;
                int lineChanged = -1;
                int deltaChanges = 0;

                while (j < linesPatch.length && currPatch) {
                    // Edge case if the line is blank, just skip it
                    if (linesPatch[j].length() == 0) {
                        j += 1;
                        continue;
                    }
                    // This is the first + or - we see
                    if (lineChanged < 0 && (linesPatch[j].charAt(0) == '+' || linesPatch[j].charAt(0) == '-')) {
                        lineChanged = fromLineNumber + j - i - deltaChanges - 1;
                    }

                    if (lineChanged > 0 && linesPatch[j].charAt(0) == '+') {
                        deltaChanges += 1;
                    }

                    // There are no more changes in this hunk
                    if (lineChanged >= 0 && ((linesPatch[j].charAt(0) != '+' && linesPatch[j].charAt(0) != '-') || j == linesPatch.length - 1)) {
                        // Add the affected line
                        linesAffected.add(lineChanged);
                        // Reset the lineChanged holder
                        lineChanged = -1;
                    }

                    // Check if the next is another patch
                    currPatch = StringUtils.substringBetween(linesPatch[j], "@@") == null;
                    if (!currPatch)  i = j - 2;
                    j += 1;
                }
            }
        }
        return linesAffected;
    }

    /**
     * Extracts the patch date from the diff.
     *
     * @param patch - String representing the patch information
     * @return
     */
    public static String getPatchDate(String patch) {
        String line = patch.split("\n")[1];
        String data = line.split("\\+\\+\\+ ")[1];
        String[] values = data.split("\t|\\s");
        StringBuilder sb = new StringBuilder();
        if (values.length < 2) return null;
        for (int i = 1; i < values.length; i++) {
            sb.append(values[i] + " ");
        }
        values[1] = values[1].replace("/", "-");
        if (values[1].length() == 10) {
            String date = new DateTime(values[1]).toString(ISODateTimeFormat.date());
            return date;
        }
        return null;
    }
}
