/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.vulnerabilityproducer.utils.patches;

import eu.fasten.vulnerabilityproducer.utils.PatchFinder;
import eu.fasten.vulnerabilityproducer.utils.Vulnerability;
import eu.fasten.vulnerabilityproducer.utils.connections.JavaHttpClient;
import org.joda.time.DateTime;
import org.joda.time.format.ISODateTimeFormat;
import org.jooq.tools.json.JSONArray;
import org.jooq.tools.json.JSONObject;
import org.jooq.tools.json.JSONParser;
import org.jooq.tools.json.ParseException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

public class JIRARanger extends GenericRanger {
    private final Logger logger = LoggerFactory.getLogger(JIRARanger.class.getName());

    public JIRARanger(JavaHttpClient httpClient, JSONParser jsonParser) {
        super(httpClient, jsonParser);
    }

    /**
     * Injects information taking it from JIRA tickets.
     * The information is held into either comments or attachments.
     * @param ref - link to JIRA ticket
     * @return - set of patches
     */
    public HashSet<Vulnerability.Patch> parseJIRATicket(String ref) {
        // Clean JIRA link
        ref = ref.split("\\?")[0];
        // If protected resource, just move on
        logger.info("Parsing JIRA Ticket with URL: " + ref);
        HashSet<Vulnerability.Patch> patches = new HashSet<>();
        var jiraServer = ref.split("/browse/")[0];
        var ticketId = ref.split("/browse/")[1];

        var linkToJson = jiraServer + "/rest/api/2/issue/" + ticketId;
        var ticketJson = httpClient.sendGet(linkToJson);
        if (ticketJson.contains("{\"errorMessages\":[\"Issue Does Not Exist\"]") ||
                ticketJson.contains("To: issues@bookkeeper.apache.org")) {
            return patches;
        }
        // Extract each of the attachments, if the contain a patch, parse it
        Object obj = null;
        try {
            obj = jsonParser.parse(ticketJson);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        JSONObject payload = (JSONObject) obj;
        JSONObject fields = (JSONObject) payload.get("fields");

        JSONArray attachments = (JSONArray) fields.get("attachment");
        JSONArray comments = (JSONArray) ((JSONObject )fields.get("comment")).get("comments");

        // Attachments
        for (Object attachment : attachments) {
            String linkToAttachment = (String) ((JSONObject) attachment).get("content");
            if (linkToAttachment.endsWith(".patch")) {
                var rawPatch = httpClient.sendGet(linkToAttachment);
                // Parse the diffs
                patches.addAll(DiffParser.getPatchesFromDiffs(rawPatch));
                // Get date of creation
                var creationDate = new DateTime(((JSONObject) attachment).get("created")).toString(ISODateTimeFormat.date());
                patches.forEach(p -> p.setPatchDate(creationDate));
            }
        }

        // Comments
        var potentialPatches = new HashSet<String>();
        for (Object comment : comments) {
            String body = (String) ((JSONObject) comment).get("body");
            potentialPatches.addAll(PatchFinder.findPatchLinks(body));
        }
        for (String pp : potentialPatches) {
            // Checks for circular dep
            if (pp != ref && !pp.contains(ref)) {
                var vpp = PatchFinder.parseReference(pp);
                if (vpp != null && vpp.size() > 0) patches.addAll(vpp);
            }
        }

        return patches;
    }
}
