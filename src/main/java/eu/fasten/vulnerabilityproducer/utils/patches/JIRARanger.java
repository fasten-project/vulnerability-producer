/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.vulnerabilityproducer.utils.patches;

import eu.fasten.vulnerabilityproducer.utils.*;
import eu.fasten.vulnerabilityproducer.utils.Vulnerability.*;
import eu.fasten.vulnerabilityproducer.utils.connections.JavaHttpClient;
import org.joda.time.DateTime;
import org.joda.time.format.ISODateTimeFormat;
import org.jooq.tools.json.JSONArray;
import org.jooq.tools.json.JSONObject;
import org.jooq.tools.json.JSONParser;
import org.jooq.tools.json.ParseException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

public class JIRARanger extends GenericRanger {
    private final Logger logger = LoggerFactory.getLogger(JIRARanger.class.getName());

    public JIRARanger(JavaHttpClient httpClient, JSONParser jsonParser) {
        super(httpClient, jsonParser);
    }

    /**
     * Injects information taking it from JIRA tickets.
     * The information is held into either comments or attachments.
     * @param ref - link to JIRA ticket
     * @return - set of patches
     */
    public HashSet<Patch> parseJIRATicket(String ref) {
        ref = ref.split("\\?")[0];
        logger.info("Parsing JIRA Ticket with URL: " + ref);
        var patches = new HashSet<Patch>();
        var jiraServer = ref.split("/browse/")[0];
        var ticketId = ref.split("/browse/")[1];

        var linkToJson = jiraServer + "/rest/api/2/issue/" + ticketId;
        var ticketJson = httpClient.sendGet(linkToJson);

        if (ticketJson.contains("{\"errorMessages\":[\"Issue Does Not Exist\"]")) {
            return patches;
        }

        try {
            Object obj = jsonParser.parse(ticketJson);
            var payload = (JSONObject) obj;
            var fields = (JSONObject) payload.get("fields");

            var attachments = (JSONArray) fields.get("attachment");
            var comments = (JSONArray) ((JSONObject) fields.get("comment")).get("comments");

            // Attachments
            if (attachments != null) {
                for (Object attachment : attachments) {
                    var linkToAttachment = (String) ((JSONObject) attachment).get("content");
                    if (linkToAttachment.endsWith(".patch")) {
                        var rawPatch = httpClient.sendGet(linkToAttachment);
                        patches.addAll(DiffParser.getPatchesFromUnifiedDiff(rawPatch));
                        var creationDate = new DateTime(((JSONObject) attachment).get("created")).toString(ISODateTimeFormat.date());
                        patches.forEach(p -> {
                            p.setPatchDate(creationDate);
                            p.setPatchUrl(linkToAttachment);
                        });
                    }
                }
            }

            // Comments
            if (comments != null) {
                var potentialPatches = new HashSet<String>();
                for (Object comment : comments) {
                    var body = (String) ((JSONObject) comment).get("body");
                    var pp = PatchFinder.findPatchLinks(body);
                    var cpref = ref;
                    pp.stream().filter(p -> !p.equals(cpref) && !p.contains(cpref));
                    potentialPatches.addAll(pp);
                }
                for (String pp : potentialPatches) {
                    var vpp = PatchFinder.parseReference(pp);
                    if (vpp != null && vpp.size() > 0) {
                        patches.addAll(vpp);
                    }
                }
            }
        } catch (Exception e) {
            logger.error("Could not parse JIRA ticket: " + ref);
        }
        return patches;
    }
}
