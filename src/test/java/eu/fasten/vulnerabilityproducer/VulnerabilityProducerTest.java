/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.vulnerabilityproducer;

import eu.fasten.vulnerabilityproducer.utils.Vulnerability;
import eu.fasten.vulnerabilityproducer.utils.mappers.Severity;
import eu.fasten.vulnerabilityproducer.utils.parsers.ParserManager;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.*;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class VulnerabilityProducerTest {

    private VulnerabilityProducer vulnerabilityProducer;
    ParserManager parserMock = Mockito.mock(ParserManager.class);
    KafkaProducer kpMock = Mockito.mock(KafkaProducer.class);

    @BeforeEach
    public void setUp() {
        vulnerabilityProducer = new VulnerabilityProducer();
        vulnerabilityProducer.injectParserManager(parserMock);
        vulnerabilityProducer.setKafkaProducer(kpMock);
    }

    @Test
    public void producerTest() {
        // Clean the queue
        vulnerabilityProducer.getQueue().clear();
        try {
            HashSet<Vulnerability> vhs = new HashSet<>();
            Vulnerability dummy1 = new Vulnerability("ID-1");
            Vulnerability dummy2 = new Vulnerability("ID-2");
            vhs.add(dummy1);
            vhs.add(dummy2);
            ProducerRecord<String, String> rec1 = new ProducerRecord<>(VulnerabilityProducer.topic, dummy1.toJson());
            ProducerRecord<String, String> rec2 = new ProducerRecord<>(VulnerabilityProducer.topic, dummy2.toJson());

            when(parserMock.getVulnerabilitiesFromParsers()).thenReturn(vhs);

            // Set the producer thread with the parserMock
            ProducerThread prt = new ProducerThread(vulnerabilityProducer.getQueue(), parserMock);
            vulnerabilityProducer.setProducerThread(prt);
            vulnerabilityProducer.getProducerThread()
                    .start();

            // Wait for ut to be initialized and terminate updater
            sleep(1);
            var pt = vulnerabilityProducer.getProducerThread();
            var ut = pt.getUpdater();
            ut.terminate();

            vulnerabilityProducer.produce();
            verify(kpMock).send(rec1);

            vulnerabilityProducer.produce();
            verify(kpMock).send(rec2);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    public void updaterTest() {
        // Clean the queue
        vulnerabilityProducer.getQueue().clear();
        try {
            HashSet<Vulnerability> vhs = new HashSet<>();
            Vulnerability dummy1 = new Vulnerability("ID-1");
            Vulnerability dummy2 = new Vulnerability("ID-2");
            vhs.add(dummy1);
            vhs.add(dummy2);

            when(parserMock.getVulnerabilitiesFromParsers()).thenReturn(vhs);

            HashSet<Vulnerability> vhsu = new HashSet<>();
            vhsu.add(new Vulnerability("ID-UPDATE"));
            when(parserMock.getUpdatesFromParsers()).thenReturn(vhsu);
            doNothing().when(parserMock).sleep();

            // Set the producerThread in the producer
            ProducerThread prt = new ProducerThread(vulnerabilityProducer.getQueue(), parserMock);
            vulnerabilityProducer.setProducerThread(prt);
            vulnerabilityProducer.getProducerThread().start();


            // Wait for ut to be initialized
            sleep(1);
            var pt = vulnerabilityProducer.getProducerThread();
            var ut = pt.getUpdater();
            ut.terminate();

            vulnerabilityProducer.produce();

            Vulnerability v1 = new Vulnerability("ID-1");
            vulnerabilityProducer.produce();
            Vulnerability v2 = new Vulnerability("ID-2");

            vulnerabilityProducer.produce();
            Vulnerability updatedV = new Vulnerability("ID-UPDATE");
            ProducerRecord<String, String> recUpdate = new ProducerRecord<>(VulnerabilityProducer.topic, updatedV.toJson());

            verify(kpMock).send(recUpdate);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    public void testReadDataFromJson() {
        List<Vulnerability> vExp = new ArrayList<>();
        Vulnerability v = new Vulnerability("CVE-2017-18640");
        v.setSeverity(Severity.HIGH);
        v.setDescription("Lorem");
        v.setScoreCVSS2(5.0);
        v.setScoreCVSS3(7.5);
        v.setPublishedDate("12/11/2019");
        v.setLastModifiedDate("08/31/2020");
        v.addPurl("pkg:maven/org.yaml/snakeyaml@1.4");
        v.addPatchLink("https://bitbucket.org/asomov/snakeyaml/commits/da11ddbd91c1f8392ea932b37fa48110fa54ed8c");
        v.addReference("https://bitbucket.org/asomov/snakeyaml/wiki/Billion%20laughs%20attack");
        Vulnerability.Patch p = new Vulnerability.Patch();
        p.setPatchDate("24/02/2020");
        p.setFileName("/src/main/java/org/yaml/snakeyaml/LoaderOptions.java");
        List<Integer> lineNumbers = new ArrayList<>();
        lineNumbers.add(19);
        lineNumbers.add(57);
        p.setLineNumbers(lineNumbers);
        v.addPatch(p);
        vExp.add(v);

        List<Vulnerability> vulns = vulnerabilityProducer.getVulnerabilitiesFromJson("./src/test/resources/data.json");
        assertEquals(vExp, vulns);
    }

    /**
     * Helper to handle threaded code
     * @param seconds
     */
    private void sleep(int seconds) {

        try {
            TimeUnit.SECONDS.sleep(seconds);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
