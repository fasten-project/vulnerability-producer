/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.vulnerabilityproducer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import eu.fasten.vulnerabilityproducer.db.NitriteController;
import eu.fasten.vulnerabilityproducer.utils.Patch;
import eu.fasten.vulnerabilityproducer.utils.PatchFinder;
import eu.fasten.vulnerabilityproducer.utils.Vulnerability;
import eu.fasten.vulnerabilityproducer.utils.connections.JavaHttpClient;
import eu.fasten.vulnerabilityproducer.utils.mappers.PurlMapper;
import eu.fasten.vulnerabilityproducer.utils.mappers.Severity;
import eu.fasten.vulnerabilityproducer.utils.mappers.VersionRanger;
import eu.fasten.vulnerabilityproducer.utils.parsers.NVDParser;
import org.apache.commons.io.FileUtils;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.jooq.tools.json.JSONParser;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.owasp.dependencycheck.data.nvd.json.DefCveItem;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.verify;

public class VulnerabilityProducerTest {

    public static final String testmnt = "./src/test/resources";

    private VulnerabilityProducer vulnerabilityProducer;
    KafkaProducer<String, String> kpMock = Mockito.mock(KafkaProducer.class);

    @BeforeEach
    public void setUp() {
        vulnerabilityProducer = new VulnerabilityProducer();
        vulnerabilityProducer.setKafkaProducer(kpMock);
        vulnerabilityProducer.setKafkaTopic("fasten.vulnerability.out");
    }

    @Test
    public void testReadDataFromJson() {
        var vExp = new ArrayList<Vulnerability>();
        Vulnerability v = new Vulnerability("CVE-2017-18640");
        v.setSeverity(Severity.HIGH);
        v.setDescription("Lorem");
        v.setScoreCVSS2(5.0);             v.setScoreCVSS3(7.5);
        v.setPublishedDate("12/11/2019"); v.setLastModifiedDate("08/31/2020");
        v.addPurl("pkg:maven/org.yaml/snakeyaml@1.4");
        v.addPatchLink("https://bitbucket.org/asomov/snakeyaml/commits/da11ddbd91c1f8392ea932b37fa48110fa54ed8c");
        v.addReference("https://bitbucket.org/asomov/snakeyaml/wiki/Billion%20laughs%20attack");
        var p = new Patch();
        p.setPatchDate("24/02/2020");
        p.setFileName("/src/main/java/org/yaml/snakeyaml/LoaderOptions.java");
        var newLineNumbers      = new ArrayList<>(Arrays.asList(19, 57));
        var originalLineNumbers = new ArrayList<>(Arrays.asList(20, 58));
        p.setOriginalChangedLineNumbers(originalLineNumbers);
        p.setNewChangedLineNumbers(newLineNumbers);
        p.setPatchUrl("https://bitbucket.org/asomov/snakeyaml/commits/da11ddbd91c1f8392ea932b37fa48110fa54ed8c");
        v.addPatch(p);
        vExp.add(v);

        vulnerabilityProducer.getVulnerabilitiesFromJson("./src/test/resources/data.json");
        verify(kpMock).send(new ProducerRecord<>("fasten.vulnerability.out", v.toJson()));
    }

    @Test
    @Disabled
    void endToEndTestForCVE_2019_14893() throws IOException {
        var mnt = "./src/test/resources";
        JavaHttpClient client = new JavaHttpClient();
        NitriteController ncMock = Mockito.mock(NitriteController.class);

        var vr = new VersionRanger(client, mnt + "/test_versions.json");
        var pf = new PatchFinder(null, client, System.getenv("FASTEN_GHTOKEN"));
        var pm = new PurlMapper(vr, mnt + "/purl_maps/",
                "both", client);
        var parser = new NVDParser(new JSONParser(), client, mnt + "/purl_maps/");

        var nvd_cve_string = FileUtils.readFileToString(
                new File("./src/test/resources/end_to_end/cve_2019_14893.json"),
                StandardCharsets.UTF_8);
        final Gson gson = new GsonBuilder().create();
        var cve = gson.fromJson(nvd_cve_string, DefCveItem.class);
        var v = parser.parseVulnerability(cve);

        assertEquals("cpe:2.3:a:fasterxml:jackson-databind", v.getBaseCpe());
        pf.parseReferences(v, ncMock);
        pm.inferPurls(v, pf);
        System.out.println(v.toJson());
    }

    @Test
    @Disabled
    void endToEndTestForCVE_2021_41079() throws IOException {
        var mnt = "./src/test/resources";
        JavaHttpClient client = new JavaHttpClient();
        NitriteController ncMock = Mockito.mock(NitriteController.class);

        var vr = new VersionRanger(client, mnt + "/test_versions.json");
        var pf = new PatchFinder(null, client, System.getenv("FASTEN_GHTOKEN"));
        var pm = new PurlMapper(vr, mnt + "/purl_maps/",
                "both", client);
        var parser = new NVDParser(new JSONParser(), client, mnt + "/purl_maps/");

        var nvd_cve_string = FileUtils.readFileToString(
                new File("./src/test/resources/end_to_end/cve_2021_41079.json"),
                StandardCharsets.UTF_8);
        final Gson gson = new GsonBuilder().create();
        var cve = gson.fromJson(nvd_cve_string, DefCveItem.class);
        var v = parser.parseVulnerability(cve);

//        assertEquals("cpe:2.3:a:fasterxml:jackson-databind", v.getBaseCpe());
        pf.parseReferences(v, ncMock);
        pm.inferPurls(v, pf);
        System.out.println(v.toJson());
    }
}
