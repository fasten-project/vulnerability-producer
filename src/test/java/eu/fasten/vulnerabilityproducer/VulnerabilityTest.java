/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.vulnerabilityproducer;

import eu.fasten.vulnerabilityproducer.utils.Patch;
import eu.fasten.vulnerabilityproducer.utils.Vulnerability;
import eu.fasten.vulnerabilityproducer.utils.mappers.Severity;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.stream.Collectors;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class VulnerabilityTest {
    Vulnerability v = new Vulnerability("CVE-TEST");

    String toJson = "{" +
            "\"id\":\"CVE-TEST\"," +
            "\"purls\":[]," +
            "\"base_cpe\":\"testCPE\"," +
            "\"first_patched_purls\":[]," +
            "\"scoreCVSS2\":7.5," +
            "\"scoreCVSS3\":8.0," +
            "\"published_date\":\"05/05/2017\"," +
            "\"last_modified_date\":\"04/06/2017\"," +
            "\"description\":\"This is a test to see the JSON I get\"," +
            "\"references\":[\"example_reference\"]," +
            "\"patch_links\":[\"example_patch\"]," +
            "\"exploits\":[\"example_exploit\"]," +
            "\"patches\":[{" +
                    "\"filename\":\"file.c\"," +
                    "\"patch_date\":\"08/04/2017\"," +
                    "\"patch_url\":\"patch_url\"," +
                    "\"original_changed_line_numbers\":[45]," +
                    "\"new_changed_line_numbers\":[45]}" +
            "]}";

    @Test
    public void testGetId() {
        assertEquals("CVE-TEST", v.getId());
    }

    @Test
    public void testGetCVSS2() {
        v.setScoreCVSS2(1.0);
        assertEquals(Double.valueOf(1.0), v.getScoreCVSS2());
    }

    @Test
    public void testGetCVSS3() {
        v.setScoreCVSS3(1.0);
        assertEquals(Double.valueOf(1.0), v.getScoreCVSS3());
    }

    @Test
    public void testGetDescription() {
        v.setDescription("test");
        assertEquals("test", v.getDescription());
    }

    @Test
    public void testGetExploits() {
        v.addExploit("exploit");
        assertTrue(v.getExploits().contains("exploit"));
    }

    @Test
    public void testGetPatches() {
        v.addPatchLink("patch");
        assertTrue(v.getPatchLinks().contains("patch"));
    }

    @Test
    public void testGetDate() {
        v.setLastModifiedDate("test-date");
        assertEquals("test-date", v.getLastModifiedDate());
    }

    @Test
    public void toJsonTest() {
        Vulnerability v = new Vulnerability("CVE-TEST");
        v.setBaseCpe("testCPE");
        v.setScoreCVSS2(7.5);
        v.setScoreCVSS3(8.0);
        v.setLastModifiedDate("04/06/2017");
        v.setPublishedDate("05/05/2017");
        v.setDescription("This is a test to see the JSON I get");
        v.addPatchLink("example_patch");
        v.addExploit("example_exploit");
        v.addReference("example_reference");
        List<Integer> hunks = new ArrayList<>();
        hunks.add(45);
        v.addPatch(new Patch("file.c", hunks, hunks, "patch_url", "08/04/2017"));
        assertEquals(toJson, v.toJson());
    }

    @Test
    public void testMerge() {
        // Construct the first one
        Vulnerability v1 = new Vulnerability("test-id");
        v1.addPurl("pgk:pypi/django@1.0");
        v1.setPublishedDate("20/06/2020");
        v1.addReference("www.reference.com");
        // Construct the second one
        Vulnerability v2 = new Vulnerability("test-id");
        v2.addPurl("pgk:pypi/django@1.0");
        v2.addPurl("pgk:pypi/django@1.4");
        v2.addReference("www.anotherreference.com");
        v2.addPatchLink("www.patch.com");
        v2.setSeverity(Severity.CRITICAL);
        v2.setCweIds(new ArrayList<>(Collections.singleton("CWE-23")));
        v2.setVectorCVSS2("5.5");
        v2.setVectorCVSS3("7.4");

        v1.merge(v2);
        assertTrue(v1.getPurls().contains("pgk:pypi/django@1.4"));
        assertTrue(v1.getReferences().contains("www.anotherreference.com"));
        assertTrue(v1.getPatchLinks().contains("www.patch.com"));
        assertEquals(v1.getSeverity(), Severity.CRITICAL);
        assertEquals(v1.getCweIds(), v2.getCweIds());
        assertEquals(v1.getVectorCVSS2(), v2.getVectorCVSS2());
        assertEquals(v1.getVectorCVSS3(), v2.getVectorCVSS3());
    }

    @Test
    void processingOrder() {
        var v0 = new Vulnerability("XYZ");
        var v1 = new Vulnerability("CVE-2019-17571");
        var v2 = new Vulnerability("CVE-2021-44228");
        var v3 = new Vulnerability("CVE-2021-0123");
        var s = new HashSet<Vulnerability>();
        s.add(v0);
        s.add(v1);
        s.add(v2);
        s.add(v3);
        var pl = s.stream().sorted().collect(Collectors.toList());

        assertEquals(pl.get(0), v2);
        assertEquals(pl.get(1), v3);
        assertEquals(pl.get(2), v1);
        assertEquals(pl.get(3), v0);
    }
}
