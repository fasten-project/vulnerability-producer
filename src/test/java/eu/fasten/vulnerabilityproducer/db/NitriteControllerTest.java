/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.vulnerabilityproducer.db;

import eu.fasten.vulnerabilityproducer.utils.Patch;
import eu.fasten.vulnerabilityproducer.utils.Vulnerability;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashSet;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class NitriteControllerTest {
    private final Path pathToNitrite = Files.createTempDirectory("nitrite");
    private final NitriteController nc = new NitriteController(pathToNitrite + "test.db");

    public NitriteControllerTest() throws IOException {
    }

    @Test
    public void testInsertions() throws ParseException {
        Vulnerability v = new Vulnerability("test");
        nc.insertVulnerability(v);
        assertEquals(v, nc.findVulnerabilityEntry("test").orElseThrow());

        PatchObject po = new PatchObject();
        po.setPatchURL("test_patch");
        HashSet<Patch> files = new HashSet<>();
        files.add(new Patch("test_file",
                new ArrayList<>(),
                new ArrayList<>(),
                "test_url",
                "test_date"));

        po.setFilesChanged(files);
        nc.insertPatch(po);
        assertEquals(files, nc.findPatchEntry("test_patch").orElseThrow());
        assertEquals(0L, nc.getDaysSinceModification(pathToNitrite.toString()));
    }
}
