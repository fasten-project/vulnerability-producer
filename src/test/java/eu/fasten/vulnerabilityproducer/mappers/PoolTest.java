/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.vulnerabilityproducer.mappers;

import eu.fasten.vulnerabilityproducer.utils.mappers.*;
import org.junit.jupiter.api.*;

import java.util.*;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class PoolTest {

    HashMap<String, String> mavenMap = new HashMap<>();
    HashMap<String, String> pypiMap = new HashMap<>();
    int INITIAL_WEIGHT = 10;

    Pool pool;

    @BeforeEach
    public void populateMaps() {
        mavenMap.put("https://github.com/mockito/mockito", "pkg:maven/org.mockito/mockito-core");
        mavenMap.put("https://github.com/tensorflow/tensorflow", "pkg:maven/org.tensorflow/tensorflow");

        pypiMap.put("https://github.com/pallets/flask", "pkg:pypi/flask");
        pypiMap.put("https://github.com/tensorflow/tensorflow", "pkg:pypi/tensorflow");

        var maps = Arrays.asList(mavenMap, pypiMap);
        pool = new Pool(maps, INITIAL_WEIGHT);
    }

    @Test
    public void testConstructor() {
        var keyMaven  = "https://github.com/mockito/mockito";
        var keyPypi   = "https://github.com/pallets/flask";
        var keyShared = "https://github.com/tensorflow/tensorflow";

        assertTrue(pool.getMappings().containsKey(keyMaven));
        assertTrue(pool.getMappings().containsKey(keyPypi));
        assertTrue(pool.getMappings().containsKey(keyShared));

        assertEquals("pkg:maven/org.mockito/mockito-core", pool.getMappings().get(keyMaven).get(0).getKey());
        assertEquals("pkg:pypi/flask", pool.getMappings().get(keyPypi).get(0).getKey());
        assertEquals("pkg:maven/org.tensorflow/tensorflow", pool.getMappings().get(keyShared).get(0).getKey());
        assertEquals("pkg:pypi/tensorflow", pool.getMappings().get(keyShared).get(1).getKey());


        assertEquals(INITIAL_WEIGHT, pool.getMappings().get(keyMaven).get(0).getValue());
        assertEquals(INITIAL_WEIGHT, pool.getMappings().get(keyPypi).get(0).getValue());
        assertEquals(INITIAL_WEIGHT, pool.getMappings().get(keyShared).get(0).getValue());
        assertEquals(INITIAL_WEIGHT, pool.getMappings().get(keyShared).get(1).getValue());
    }

    @Test
    public void testInsertVote() {
        // new_key - new_value --> create new mapping
        var key = "https://github.com/apache/tomcat";
        var value = "pkg:maven/org.apache.tomcat/tomcat-core";
        pool.insertVote(key, value);
        assertTrue(pool.getMappings().containsKey(key));
        assertEquals(value, pool.getMappings().get(key).get(0).getKey());
        assertEquals(1, pool.getMappings().get(key).get(0).getValue());

        // old_key - new_value --> create new pair with count 1
        var oldKey = "https://github.com/pallets/flask";
        var newValue = "pkg:pypi/fake_flask";
        pool.insertVote(oldKey, newValue);
        assertEquals(newValue, pool.getMappings().get(oldKey).get(1).getKey());
        assertEquals(1, pool.getMappings().get(oldKey).get(1).getValue());

        // old_key - old_value --> increase count by 1
        var oldValue = "pkg:pypi/flask";
        pool.insertVote(oldKey, oldValue);
        assertEquals(INITIAL_WEIGHT + 1, pool.getMappings().get(oldKey).get(0).getValue());
    }

    @Test
    public void testGetMostVoted() {
        var matchGood = pool.getMostVoted("https://github.com/mockito/mockito");
        assertEquals("pkg:maven/org.mockito/mockito-core", matchGood);

        pool.insertVote("https://github.com/tensorflow/tensorflow", "pkg:pypi/tensorflow");
        var matchShared = pool.getMostVoted("https://github.com/tensorflow/tensorflow");
        assertEquals("pkg:pypi/tensorflow", matchShared);

        pool.insertVote("https://github.com/owner/project", "pkg:pypi/wrong_project");
        pool.insertVote("https://github.com/owner/project", "pkg:pypi/project");
        pool.insertVote("https://github.com/owner/project", "pkg:pypi/project");
        var matchOverthrow = pool.getMostVoted("https://github.com/owner/project");
        assertEquals("pkg:pypi/project", matchOverthrow);
    }
}
