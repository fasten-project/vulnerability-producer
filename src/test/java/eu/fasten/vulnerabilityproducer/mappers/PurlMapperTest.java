/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.vulnerabilityproducer.mappers;

import eu.fasten.vulnerabilityproducer.utils.*;
import eu.fasten.vulnerabilityproducer.utils.Vulnerability.*;
import eu.fasten.vulnerabilityproducer.utils.mappers.PurlMapper;
import eu.fasten.vulnerabilityproducer.utils.mappers.VersionRanger;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.*;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.booleanThat;
import static org.mockito.Mockito.when;

public class PurlMapperTest {

    VersionRanger vrMock = Mockito.mock(VersionRanger.class);
    PatchFinder pfMock = Mockito.mock(PatchFinder.class);
    PurlMapper purlMapper = new PurlMapper(vrMock, pfMock, "./src/test/resources/purl_maps/", "both");

    @Test
    public void getBasePurlTest() {
        Vulnerability v = new Vulnerability();
        v.addPurl("pkg:pypi/django@1.9");
        v.addPurl("pkg:pypi/django@1.9.1");
        v.addPurl("pkg:pypi/django@1.9.2");

        assertEquals("pkg:pypi/django", purlMapper.getPurlBase(v));
    }

    @Test
    public void inferPurlStoring() {
        Vulnerability v = new Vulnerability();
        v.addPurl("pkg:pypi/django@1.9");
        v.addPatchLink("https;//github.com/python/django/commit/5326bi6b5u53b1u5ob1b5i265");

        when(pfMock.getBaseRepo(v)).thenReturn("https://github.com/python/django");

        purlMapper.inferPurls(v);
        assertEquals("pkg:pypi/django", purlMapper.pypiMap.get("https://github.com/python/django"));
    }

    @Test
    public void inferPurlMissing() {
        purlMapper.pypiMap.put("https://github.com/python/django", "pkg:pypi/django");
        var versions = new ArrayList<String>(); versions.add("pkg:pypi/django@1.9");
        var v = new Vulnerability();
        v.addPatchLink("https//github.com/python/django/commit/5326bi6b5u53b1u5ob1b5i265");
        v.addPatch(new Patch("oof.py", null, null, null, "2018-05-30"));

        when(vrMock.getPurlsBeforeDate(Mockito.anyString(), Mockito.any())).thenReturn(versions);
        when(pfMock.getBaseRepo(v)).thenReturn("https://github.com/python/django");

        purlMapper.inferPurls(v);
        assertTrue(v.getPurls().contains("pkg:pypi/django@1.9"));
    }

    @Test
    public void inferPurlFromCpes() {
        var v = new Vulnerability("TEST-1");
        v.setBaseCpes(new HashSet<>(Collections.singletonList("cpe:2.3:a:google:guava")));

        var cpe_versions = new HashMap<String, List<String>>();
        cpe_versions.put("cpe:2.3:a:google:guava",  Arrays.asList("1.0", "2.0"));
        when(vrMock.getCPEVersions(v.getId())).thenReturn(cpe_versions);

        purlMapper.inferPurls(v);
        assertTrue(v.getPurls().contains("pkg:maven/org.google.guava/guava@1.0"));
        assertTrue(v.getPurls().contains("pkg:maven/org.google.guava/guava@2.0"));
    }

    @Test
    public void testSpecialApacheCase() {
        var v = new Vulnerability("TEST-1");
        v.setBaseCpes(new HashSet<>(Collections.singletonList("cpe:2.3:a:apache:tomcat")));

        var cpe_versions = new HashMap<String, List<String>>();
        cpe_versions.put("cpe:2.3:a:apache:tomcat",  Arrays.asList("10.0"));
        when(vrMock.getCPEVersions(v.getId())).thenReturn(cpe_versions);

        purlMapper.inferPurls(v);
        assertTrue(v.getPurls().contains("pkg:maven/org.apache.tomcat/tomcat@10.0"));
    }
}
