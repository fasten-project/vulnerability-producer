/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.vulnerabilityproducer.mappers;

import eu.fasten.vulnerabilityproducer.utils.Patch;
import eu.fasten.vulnerabilityproducer.utils.PatchFinder;
import eu.fasten.vulnerabilityproducer.utils.Vulnerability;
import eu.fasten.vulnerabilityproducer.utils.connections.JavaHttpClient;
import eu.fasten.vulnerabilityproducer.utils.mappers.PurlMapper;
import eu.fasten.vulnerabilityproducer.utils.mappers.VersionRanger;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

public class PurlMapperTest {

    VersionRanger vrMock  = Mockito.mock(VersionRanger.class);
    PatchFinder pfMock    = Mockito.mock(PatchFinder.class);
    JavaHttpClient client = Mockito.mock(JavaHttpClient.class);
    PurlMapper purlMapper;

    @BeforeEach
    public void init() {
        var listUrl    = "https://salsa.debian.org/security-tracker-team/security-tracker/-/raw/master/data/CPE/list";
        var aliasesUrl = "https://salsa.debian.org/security-tracker-team/security-tracker/-/raw/master/data/CPE/aliases";

        var cpeList = "" +
                "a2ps;cpe:/a:gnu:a2ps\n" +
                "abc2ps;cpe:/a:abc2ps:abc2ps\n" +
                "asterisk;cpe:/a:digium:asterisk\n";
        var aliasesList = "" +
                "#\n" +
                "# Comments\n" +
                "#\n" +
                "cpe:/a:asterisk:asterisk\n" +
                "cpe:/a:asterisk:open_source\n" +
                "cpe:/a:asterisk:p_b_x\n" +
                "cpe:/a:digium:asterisk\n" +
                "cpe:/a:asterisk:opensource\n" +
                "\n" +
                "# End comment\n";
        when(client.sendGet(listUrl)).thenReturn(cpeList);
        when(client.sendGet(aliasesUrl)).thenReturn(aliasesList);

        purlMapper = new PurlMapper(vrMock, pfMock, "./src/test/resources/purl_maps/", "both", client);
    }

    @Test
    public void getBasePurlTest() {
        Vulnerability v = new Vulnerability();
        v.addPurl("pkg:pypi/django@1.9");
        v.addPurl("pkg:pypi/django@1.9.1");
        v.addPurl("pkg:pypi/django@1.9.2");

        assertEquals("pkg:pypi/django", purlMapper.getPurlBase(v));
    }

    @Test
    public void creationCPE2PURLMap() {
        assertTrue(purlMapper.cpe2purl.getMappings().containsKey("cpe:2.3:a:google:guava"));
        assertEquals("pkg:maven/org.google.guava/guava", purlMapper.cpe2purl.getMostVoted("cpe:2.3:a:google:guava"));
    }

    @Test
    public void importDebianCPE() {
        assertTrue(purlMapper.cpe2purl.getMappings().containsKey("cpe:2.3:a:gnu:a2ps"));
        assertEquals("pkg:deb/debian/a2ps", purlMapper.cpe2purl.getMostVoted("cpe:2.3:a:gnu:a2ps"));

        assertTrue(purlMapper.cpe2purl.getMappings().containsKey("cpe:2.3:a:asterisk:opensource"));
        assertEquals("pkg:deb/debian/asterisk", purlMapper.cpe2purl.getMostVoted("cpe:2.3:a:asterisk:opensource"));
    }

    // repo2purl
    @Test
    public void inferPurlPyPIMap() {
        purlMapper.repo2purl.insertVote("https://github.com/python/django", "pkg:pypi/django");
        var versions = new ArrayList<String>(); versions.add("pkg:pypi/django@1.9");
        var v = new Vulnerability();
        v.addPatchLink("https//github.com/python/django/commit/5326bi6b5u53b1u5ob1b5i265");
        v.addPatch(new Patch("oof.py", null, null, null, "2018-05-30"));

        when(vrMock.getPurlsBeforeDate(Mockito.anyString(), Mockito.any())).thenReturn(versions);
        when(pfMock.getBaseRepo(v)).thenReturn("https://github.com/python/django");

        purlMapper.inferPurls(v);
        assertTrue(v.getPurls().contains("pkg:pypi/django@1.9"));
    }

    @Test
    public void inferPurlMavenMap() {
        purlMapper.repo2purl.insertVote("https://github.com/apache/hive", "pkg:mvn/org.apache/hive");
        var versions = new ArrayList<String>(); versions.add("pkg:maven/org.apache/hive@0.1");
        var v = new Vulnerability();
        v.addPatchLink("https://github.com/apache/hive/commit/5326bi6b5u53b1u5ob1b5i265");
        v.addPatch(new Patch("foo.java", null, null, null, "2018-05-30"));

        when(vrMock.getPurlsBeforeDate(Mockito.anyString(), Mockito.any())).thenReturn(versions);
        when(pfMock.getBaseRepo(v)).thenReturn("https://github.com/apache/hive");

        purlMapper.inferPurls(v);
        assertTrue(v.getPurls().contains("pkg:maven/org.apache/hive@0.1"));
    }

    @Test
    public void storeRepo2PurlRepoInfo() {
        var v = new Vulnerability();
        v.addPurl("pkg:pypi/django@1.9");
        v.addPatchLink("https://github.com/python/django/commit/5326bi6b5u53b1u5ob1b5i265");

        when(pfMock.getBaseRepo(v)).thenReturn("https://github.com/python/django");

        purlMapper.inferPurls(v);
        assertEquals("pkg:pypi/django", purlMapper.repo2purl.getMostVoted("https://github.com/python/django"));
    }

    // cpe2purl
    @Test
    public void inferPurlCpe2Purl() {
        purlMapper.cpe2purl.insertVote("cpe:2.3:a:apache:hive", "pkg:maven/org.apache.hive/hive");

        var v = new Vulnerability("CVE-TEST");
        v.setBaseCpe("cpe:2.3:a:apache:hive");

        var cpe_versions = new HashMap<String, List<String>>();
        cpe_versions.put("cpe:2.3:a:apache:hive", Collections.singletonList("1.0"));
        when(vrMock.getCPEVersions(v.getId())).thenReturn(cpe_versions);

        purlMapper.inferPurls(v);
        assertTrue(v.getPurls().contains("pkg:maven/org.apache.hive/hive@1.0"));
    }

    @Test
    public void inferPurlStoringCpe2Purl() {
        var v = new Vulnerability("CVE-TEST-1");
        v.addPurl("pkg:pypi/foo@1.0");
        v.setBaseCpe("cpe:2.3:a:foo:foo");

        purlMapper.inferPurls(v);

        assertTrue(purlMapper.cpe2purl.getMappings().containsKey("cpe:2.3:a:foo:foo"));
        assertEquals("pkg:pypi/foo", purlMapper.cpe2purl.getMostVoted("cpe:2.3:a:foo:foo"));
    }

    @Test
    public void inferPurlStoringBoth() {
        var v = new Vulnerability("CVE-TEST-1");
        v.addPurl("pkg:pypi/foo@1.0");
        v.setBaseCpe("cpe:2.3:a:foo:foo");
        v.addPatchLink("https://github.com/foo/foo/commit/5326bi6b5u53b1u5ob1b5i265");
        when(pfMock.getBaseRepo(v)).thenReturn("https://github.com/foo/foo");

        purlMapper.inferPurls(v);

        assertTrue(purlMapper.cpe2purl.getMappings().containsKey("cpe:2.3:a:foo:foo"));
        assertEquals("pkg:pypi/foo", purlMapper.cpe2purl.getMostVoted("cpe:2.3:a:foo:foo"));

        assertTrue(purlMapper.repo2purl.getMappings().containsKey("https://github.com/foo/foo"));
        assertEquals("pkg:pypi/foo", purlMapper.repo2purl.getMostVoted("https://github.com/foo/foo"));
    }

    @Test
    public void testStrategyNone() {
        purlMapper.strategy = "none";

        var v = new Vulnerability("TEST-1");
        v.setBaseCpe("cpe:2.3:a:google:guava");
        v.addPatchLink("https//github.com/python/django/commit/5326bi6b5u53b1u5ob1b5i265");
        v.setPublishedDate("2018-05-30");

        // inject repo2purl information
        purlMapper.pypiMap.put("https://github.com/python/django", "pkg:pypi/django");
        var versions = new ArrayList<String>(); versions.add("pkg:pypi/django@1.9");
        when(vrMock.getPurlsBeforeDate(Mockito.anyString(), Mockito.any())).thenReturn(versions);
        when(pfMock.getBaseRepo(v)).thenReturn("https://github.com/python/django");

        // inject cpe2purl information
        purlMapper.cpe2purl.insertVote("cpe:2.3:a:google:guava", "pkg:maven/org.google/guava");

        purlMapper.inferPurls(v);
        assertEquals(0, v.getPurls().size());
    }

    @Test
    public void testStrategyRepo2Purl() {
        purlMapper.strategy = "repo2purl";

        var v = new Vulnerability("TEST-1");
        v.addPatchLink("https//github.com/python/django/commit/5326bi6b5u53b1u5ob1b5i265");
        v.setPublishedDate("2018-05-30");

        // inject repo2purl information
        purlMapper.repo2purl.insertVote("https://github.com/python/django", "pkg:pypi/django");
        var versions = new ArrayList<String>(); versions.add("pkg:pypi/django@1.9");
        when(vrMock.getPurlsBeforeDate(Mockito.anyString(), Mockito.any())).thenReturn(versions);
        when(pfMock.getBaseRepo(v)).thenReturn("https://github.com/python/django");

        // inject cpe2purl information
        purlMapper.cpe2purl.insertVote("cpe:2.3:a:google:guava", "pkg:maven/org.google/guava");

        purlMapper.inferPurls(v);

        assertTrue(v.getPurls().contains("pkg:pypi/django@1.9"));
    }

    @Test
    public void testStrategyCpe2Purl() {
        purlMapper.strategy = "cpe2purl";

        var v = new Vulnerability("TEST-1");
        v.setBaseCpe("cpe:2.3:a:google:guava");
        v.addPatchLink("https//github.com/python/django/commit/5326bi6b5u53b1u5ob1b5i265");
        v.setPublishedDate("2018-05-30");

        // inject repo2purl information
        purlMapper.repo2purl.insertVote("https://github.com/python/django", "pkg:pypi/django");

        // inject cpe2purl information
        purlMapper.cpe2purl.insertVote("cpe:2.3:a:google:guava", "pkg:maven/org.google.guava/guava");
        var versions = new HashMap<String, List<String>>();
        versions.put("cpe:2.3:a:google:guava", Collections.singletonList("1.0"));
        when(vrMock.getCPEVersions(Mockito.anyString())).thenReturn(versions);

        purlMapper.inferPurls(v);

        assertTrue(v.getPurls().contains("pkg:maven/org.google.guava/guava@1.0"));
    }

    @Test
    public void testStrategyBoth() {
        purlMapper.strategy = "both";

        var v = new Vulnerability("TEST-1");
        v.setBaseCpe("cpe:2.3:a:google:guava");
        v.addPatchLink("https//github.com/python/django/commit/5326bi6b5u53b1u5ob1b5i265");
        v.setPublishedDate("2018-05-30");

        var repoVersions = new ArrayList<String>(); repoVersions.add("pkg:pypi/django@1.9");
        when(vrMock.getPurlsBeforeDate(Mockito.anyString(), Mockito.any())).thenReturn(repoVersions);
        when(pfMock.getBaseRepo(v)).thenReturn("https://github.com/python/django");

        var cpeVersions = new HashMap<String, List<String>>();
        cpeVersions.put("cpe:2.3:a:google:guava", Collections.singletonList("29.0"));
        when(vrMock.getCPEVersions(Mockito.anyString())).thenReturn(cpeVersions);

        // inject repo2purl information
        purlMapper.repo2purl.insertVote("https://github.com/python/django", "pkg:pypi/django");

        // inject cpe2purl information
        purlMapper.cpe2purl.insertVote("cpe:2.3:a:google:guava", "pkg:maven/org.google/guava");

        purlMapper.inferPurls(v);

        assertFalse(v.getPurls().contains("pkg:maven/org.google/guava@29.0"));
        assertTrue(v.getPurls().contains("pkg:pypi/django@1.9"));
    }
}
