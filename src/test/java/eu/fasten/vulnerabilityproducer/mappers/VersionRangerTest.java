/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.vulnerabilityproducer.mappers;

import eu.fasten.vulnerabilityproducer.PatchFinderTest;
import eu.fasten.vulnerabilityproducer.utils.PatchFinder;
import eu.fasten.vulnerabilityproducer.utils.connections.JavaHttpClient;
import eu.fasten.vulnerabilityproducer.utils.mappers.VersionRanger;
import eu.fasten.vulnerabilityproducer.utils.mappers.YAMLHandler;
import kotlin.Pair;
import org.apache.commons.io.FileUtils;
import org.joda.time.DateTime;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.mockito.Mockito;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class VersionRangerTest {

    JavaHttpClient clientMock = Mockito.mock(JavaHttpClient.class);
    String path = "./src/test/resources/test_versions.json";
    VersionRanger vr = new VersionRanger(clientMock, path);

    static String jsonResponseDjango;

    static {
        try {
            jsonResponseDjango = PatchFinderTest.readFile("./src/test/resources/version_handling/django_versions.json");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    static String jsonResponseRuby;

    static {
        try {
            jsonResponseRuby = PatchFinderTest.readFile("./src/test/resources/version_handling/t_versions.json");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    String pythonPgk = "{\n" +
            "    \"releases\": {\n" +
            "        \"1.0.1\": [],\n" +
            "        \"1.0.1RELEASE\": [],\n" +
            "        \"1.0.2\": [],\n" +
            "        \"1.0.9\": [],\n" +
            "        \"2.0\": [],\n" +
            "        \"2.0.2\": []\n" +
            "    }\n" +
            "}";

    String htmlDebian;
    {
        try {
            htmlDebian = FileUtils.readFileToString(
                    new File("./src/test/resources/version_handling/libpcap.html"),
                    StandardCharsets.UTF_8);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    String jsonDebian;
    {
        try {
            jsonDebian = FileUtils.readFileToString(
                    new File("./src/test/resources/version_handling/libpcap.json"),
                    StandardCharsets.UTF_8);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @BeforeEach
    public void setup() {

    }

    @Test
    public void testWriteAndReadFromFile() throws Exception {
        String path = "./src/test/resources/test_versions.json";

        VersionRanger vr1 = new VersionRanger(clientMock, path);

        var htmlResponseKafka = PatchFinderTest.readFile("./src/test/resources/version_handling/html_kafka.htm");
        when(clientMock.sendGet("https://repo1.maven.org/maven2/org/apache/kafka/kafka")).thenReturn(htmlResponseKafka);
        when(clientMock.sendGet("https://pypi.org/pypi/django/json")).thenReturn(jsonResponseDjango);

        vr1.getVersions("/maven/org.apache.kafka/kafka");
        vr1.getVersions("/pypi/django");

        vr1.writeVersions(path);

        VersionRanger vr2 = new VersionRanger(new JavaHttpClient(), path);
        assertTrue(vr2.versionsMappings.get("/pypi/django").size() > 0);
        assertTrue(vr2.versionsMappings.get("/maven/org.apache.kafka/kafka").size() > 0);

        FileUtils.deleteQuietly(new File(path));
    }

    @Test
    public void testVulnerableVersionsJSONPartOne() throws Exception {
        when(clientMock.sendGet("https://pypi.org/pypi/mock/json")).thenReturn(pythonPgk);

        List<String> allVersions = vr.getVersions("/pypi/mock");
        String[] encodedRanges = {"<=1.0.1RELEASE", ">2.0"};
        List<String> vv = vr.getVulnerableVersionsJSON(encodedRanges, allVersions);
        List<String> vvCheck = new ArrayList<>();
        vvCheck.add("1.0.1");
        vvCheck.add("1.0.1RELEASE");
        vvCheck.add("2.0.2");

        assertEquals(vvCheck, vv);
    }

    @Test
    public void testVulnerableVersionsJSONPartTwo() throws Exception {
        when(clientMock.sendGet("https://pypi.org/pypi/mock/json")).thenReturn(pythonPgk);

        List<String> allVersions = vr.getVersions("/pypi/mock");
        String[] encodedRanges = {"<1.0.1RELEASE", ">=2.0"};
        List<String> vv = vr.getVulnerableVersionsJSON(encodedRanges, allVersions);
        List<String> vvCheck = new ArrayList<>();
        vvCheck.add("1.0.1");
        vvCheck.add("2.0");
        vvCheck.add("2.0.2");

        assertEquals(vvCheck, vv);
    }

    @Test
    public void testVulnerableVersionsYAMLPartOne() throws Exception {
        when(clientMock.sendGet("https://pypi.org/pypi/mock/json")).thenReturn(pythonPgk);

        List<String> allVersions = vr.getVersions("/pypi/mock");
        List<String> encodedRanges = new ArrayList<>();
        encodedRanges.add("<=1.0.2");
        List<String> vv = vr.getVulnerableVersionsYAML(encodedRanges, allVersions);
        List<String> vvCheck = new ArrayList<>();
        vvCheck.add("1.0.1");
        vvCheck.add("1.0.1RELEASE");
        vvCheck.add("1.0.2");

        assertEquals(vvCheck, vv);
    }

    @Test
    public void testVulnerableVersionsYAMLPartTwo() throws Exception {
        when(clientMock.sendGet("https://pypi.org/pypi/mock/json")).thenReturn(pythonPgk);

        List<String> allVersions = vr.getVersions("/pypi/mock");
        List<String> encodedRanges = new ArrayList<>();
        encodedRanges.add("==1.0.1");
        encodedRanges.add("<=2.0.2,1.0.9");
        List<String> vv = vr.getVulnerableVersionsYAML(encodedRanges, allVersions);
        List<String> vvCheck = new ArrayList<>();
        vvCheck.add("1.0.1");
        vvCheck.add("1.0.9");
        vvCheck.add("2.0");
        vvCheck.add("2.0.2");

        assertEquals(vvCheck, vv);
    }

    @Test
    public void testBuildPURLSPypi() {
        YAMLHandler.PythonPgkMapper pgk = new YAMLHandler.PythonPgkMapper();
        pgk.name = "mock_name";
        List<String> vv = new ArrayList<>();
        vv.add("1.0.1");
        vv.add("1.0.9");

        HashSet<String> purls = new HashSet<>();
        purls.add("pgk:pypi/mock_name@1.0.1");
        purls.add("pgk:pypi/mock_name@1.0.9");

        HashSet<String> purlsCheck = vr.buildPURLSPypi(pgk, vv);

        assertEquals(purls, purlsCheck);
    }

    @Test
    public void testBuildPURLSMaven() {
        YAMLHandler.JavaPgkMapper pgk = new YAMLHandler.JavaPgkMapper();
        pgk.artifactId = "mock_artifact";
        pgk.groupId = "mock_group";
        List<String> vv = new ArrayList<>();
        vv.add("1.0.1");
        vv.add("1.0.9");

        HashSet<String> purls = new HashSet<>();
        purls.add("pgk:maven/mock_group/mock_artifact@1.0.1");
        purls.add("pgk:maven/mock_group/mock_artifact@1.0.9");

        HashSet<String> purlsCheck = vr.buildPURLSMaven(pgk, vv);

        assertEquals(purls, purlsCheck);
    }

    @Test
    public void testInjectDebianPackageHTML() throws Exception {
        when(clientMock.sendGet("https://snapshot.debian.org/package/libpcap/")).thenReturn(htmlDebian);

        List<String> versions = vr.injectVersionsHTMLDebianPackage("/deb/debian/libpcap");
        assertTrue(versions.contains("1.9.1-4"));
        assertTrue(versions.contains("0.3-1"));
        assertEquals(versions.size(), 66);
    }

    @Test
    public void testInjectDebianPackageJSON() throws Exception {
        when(clientMock.sendGet("https://sources.debian.org/api/src/libpcap/")).thenReturn(jsonDebian);

        List<String> versions = vr.getVersions("/deb/debian/libpcap");
        assertTrue(versions.contains("1.8.1-6"));
    }

    @Test
    public void testRangeVersionsDebianGoodWeather() {
        String lessThanVersion = "0.9.4";
        List<String> allVersions = new ArrayList<>();
        List<String> expectedResult = new ArrayList<>();
        allVersions.add("0.8.1");
        expectedResult.add("0.8.1");
        allVersions.add("0.8.5");
        expectedResult.add("0.8.5");
        allVersions.add("0.9.1");
        expectedResult.add("0.9.1");
        allVersions.add("0.9.4");
        allVersions.add("0.9.5");
        allVersions.add("1.0.1");
        allVersions.add("1.3.1");
        allVersions.add("1.4.1-sketch");
        List<String> result = vr.getVulnerableVersionsOVAL(lessThanVersion, allVersions);
        assertEquals(expectedResult, result);
    }

    @Test
    public void testRangeVersionsDebianBadWeather() {
        String lessThanVersion = "0.9.4";
        List<String> allVersions = new ArrayList<>();
        List<String> expectedResult = new ArrayList<>();
        allVersions.add("0.8.1");
        allVersions.add("0.8.5");
        allVersions.add("0.9.1");
        allVersions.add("0.9.1");
        allVersions.add("0.9.5");
        List<String> result = vr.getVulnerableVersionsOVAL(lessThanVersion, allVersions);
        assertEquals(expectedResult, result);
    }

    @Test
    public void testGetVersionsBeforeDate() {
        var versions = new ArrayList<Pair<String, DateTime>>();
        versions.add(new Pair("1.8", new DateTime(2018, 7, 24, 0, 0)));
        versions.add(new Pair("1.9", new DateTime(2019, 7, 24, 0, 0)));

        vr.versionsMappings.put("pkg:pypi/django", versions);
        var actual = vr.getPurlsBeforeDate("pkg:pypi/django", new DateTime(2018, 12, 30, 0, 0));
        var expected = new ArrayList<>(Arrays.asList("pkg:pypi/django@1.8"));

        assertEquals(expected, actual);
    }

    @Test
    public void testGetVersionsRuby() {
        when(clientMock.sendGet("https://rubygems.org/api/v1/versions/t.json")).thenReturn(jsonResponseRuby);
        var versions = vr.getVersions("/gem/t");

        var expectedVersions = new ArrayList<>(Arrays.asList("0.0.1", "0.0.2", "0.1.0",
                "0.2.0", "0.2.1", "0.3.0", "0.3.1", "0.4.0", "0.5.0", "0.5.1", "0.6.0", "0.6.1",
                "0.6.2", "0.6.3", "0.6.4", "0.7.0"));
        assertEquals(expectedVersions, versions);
    }

    @Test
    public void testGetVulnerableVersionsRuby() {
        when(clientMock.sendGet("https://rubygems.org/api/v1/versions/t.json")).thenReturn(jsonResponseRuby);

        var safeVersionRangesOne = new ArrayList<>(Arrays.asList("~> 0.6.0", "~> 0.3.0"));
        var vvOne = vr.getVulnerableVersionsRuby("t", safeVersionRangesOne);
        var vvOneExp = new HashSet<>(Arrays.asList("0.0.1", "0.0.2", "0.1.0",
                "0.2.0", "0.2.1", "0.4.0", "0.5.0", "0.5.1", "0.7.0"));

        assertEquals(vvOneExp, vvOne);

        var safeVersionRangesTwo = new ArrayList<>(Arrays.asList(">= 0.2.0"));
        var vvTwo = vr.getVulnerableVersionsRuby("t", safeVersionRangesTwo);
        var vvTwoExp = new HashSet<>(Arrays.asList("0.0.1", "0.0.2", "0.1.0"));

        assertEquals(vvTwoExp, vvTwo);

        var safeVersionRangesThree = new ArrayList<>(Arrays.asList("< 0.2.0",">= 0.5.0"));
        var vvThree = vr.getVulnerableVersionsRuby("t", safeVersionRangesThree);
        var vvThreeExp = new HashSet<>(Arrays.asList("0.2.0", "0.2.1", "0.3.0", "0.3.1", "0.4.0"));

        assertEquals(vvThreeExp, vvThree);
    }
}
