/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.vulnerabilityproducer.parsers;

import eu.fasten.vulnerabilityproducer.utils.Vulnerability;
import eu.fasten.vulnerabilityproducer.utils.connections.JavaHttpClient;
import eu.fasten.vulnerabilityproducer.utils.mappers.Severity;
import eu.fasten.vulnerabilityproducer.utils.mappers.VersionRanger;
import eu.fasten.vulnerabilityproducer.utils.parsers.GHParser;
import kotlin.Pair;
import org.apache.commons.io.FileUtils;
import org.joda.time.DateTime;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.stream.Collectors;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.when;

public class GHParserTest {
    JavaHttpClient clientMock = Mockito.mock(JavaHttpClient.class);
    VersionRanger versionRanger = new VersionRanger(clientMock, "./analyzer/vulnerability-plugin/src/main/resources/trackers/package_versions.json");
    String token = "<fake_token>";
    String pathToCursor = "./src/test/resources/parsers/cursor.txt.txt";

    GHParser ghParser = new GHParser(clientMock, token, versionRanger, pathToCursor);

    String queryNoCursor = "query {\n" +
            "  securityAdvisories(first: 100) {\n" +
            "    nodes {\n" +
            "      description\n" +
            "      identifiers {\n" +
            "        type\n" +
            "        value\n" +
            "      }\n" +
            "      severity\n" +
            "      references {\n" +
            "        url\n" +
            "      }\n" +
            "      vulnerabilities(first: 10) {\n" +
            "        nodes {\n" +
            "          package {\n" +
            "            ecosystem\n" +
            "            name\n" +
            "          }\n" +
            "          vulnerableVersionRange\n" +
            "          firstPatchedVersion {\n" +
            "            identifier\n" +
            "          }\n" +
            "        }\n" +
            "      }\n" +
            "    }\n" +
            "    pageInfo {\n" +
            "      endCursor\n" +
            "      hasNextPage\n" +
            "    }\n" +
            "  }\n" +
            "}";

    String queryYesCursor = "query {\n" +
            "  securityAdvisories(first: 100, after: \"<fake_cursor>\") {\n" +
            "    nodes {\n" +
            "      description\n" +
            "      identifiers {\n" +
            "        type\n" +
            "        value\n" +
            "      }\n" +
            "      severity\n" +
            "      references {\n" +
            "        url\n" +
            "      }\n" +
            "      vulnerabilities(first: 10) {\n" +
            "        nodes {\n" +
            "          package {\n" +
            "            ecosystem\n" +
            "            name\n" +
            "          }\n" +
            "          vulnerableVersionRange\n" +
            "          firstPatchedVersion {\n" +
            "            identifier\n" +
            "          }\n" +
            "        }\n" +
            "      }\n" +
            "    }\n" +
            "    pageInfo {\n" +
            "      endCursor\n" +
            "      hasNextPage\n" +
            "    }\n" +
            "  }\n" +
            "}";

    String ghResponseAPI;

    {
        try {
            ghResponseAPI = FileUtils.readFileToString(new File("./src/test/resources/parsers/ghAPISecurity.json"), StandardCharsets.UTF_8);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void testQueryBuilder() {
        String queryWithoutCursor = ghParser.buildQuery(null);
        assertEquals(queryWithoutCursor, queryNoCursor);

        String queryWithCursor = ghParser.buildQuery("<fake_cursor>");
        assertEquals(queryWithCursor, queryYesCursor);
    }

    @Test
    public void testParseGHResponse() throws Exception {
        // SETUP
        HashMap<String, String> values = new HashMap<>();
        values.put("query", queryNoCursor);
        when(clientMock.sendPost("https://api.github.com/graphql", token, values)).thenReturn(ghResponseAPI);
        List versions = Arrays.asList("1.3.2", "1.4.9", "1.4.10", "1.4.12").stream().map(x -> new Pair(x, null)).collect(Collectors.toList());
        ghParser.getVersionRanger().versionsMappings.put("/maven/com.thoughtworks.xstream/xstream", versions);
        ghParser.setCursor(null);

        // EXECUTE
        HashMap<String, Vulnerability> result = ghParser.getVulnerabilities();
        Vulnerability vCheck = new Vulnerability("CVE-2017-7957");
        vCheck.setSeverity(Severity.HIGH);
        vCheck.addReference("https://nvd.nist.gov/vuln/detail/CVE-2017-7957");
        vCheck.addReference("https://github.com/advisories/GHSA-7hwc-46rm-65jh");
        vCheck.addPurl("pgk:maven/com.thoughtworks.xstream/xstream@1.4.9");
        vCheck.addPurl("pgk:maven/com.thoughtworks.xstream/xstream@1.3.2");
        vCheck.setDescription("XStream through 1.4.9, when a certain denyTypes workaround is not used," +
                " mishandles attempts to create an instance of the primitive type 'void' during " +
                "unmarshalling, leading to a remote application crash, as demonstrated by an" +
                " xstream.fromXML(\"<void/>\") call.");


        // ASSERT
        assertEquals(1, result.size());
        assertEquals(result.get("CVE-2017-7957"), vCheck);
    }

    @AfterAll
    public static void deleteCursor() {
        File ghCursor = new File("./src/test/resources/parsers/cursor.txt.txt");
        if (ghCursor.exists()) {
            FileUtils.deleteQuietly(ghCursor);
        }
    }
}
