/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.vulnerabilityproducer.parsers;

import eu.fasten.vulnerabilityproducer.VulnerabilityProducerTest;
import eu.fasten.vulnerabilityproducer.utils.connections.JavaHttpClient;
import eu.fasten.vulnerabilityproducer.utils.mappers.PurlMapper;
import eu.fasten.vulnerabilityproducer.utils.parsers.NVDParser;
import eu.fasten.vulnerabilityproducer.utils.Vulnerability;
import org.jooq.tools.json.JSONParser;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.owasp.dependencycheck.data.nvd.json.DefCveItem;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class NVDParserTest {

    // Inject Java Http Client to test
    JavaHttpClient clientMock = Mockito.mock(JavaHttpClient.class);
    PurlMapper purlMapperMock = Mockito.mock(PurlMapper.class);

    private NVDParser parser;

    @BeforeEach
    public void setup() {
        parser = new NVDParser(new JSONParser(), clientMock, purlMapperMock, VulnerabilityProducerTest.testmnt);
    }

    @Test
    public void parseVulnerabilities() {
        File path_to_zip = new File("./src/test/resources/test.json.gz");
        try {
            // Grab two items from the testing gzip for testing
            List<DefCveItem> cve = parser.parseCVEZip(path_to_zip).subList(0, 2);
            List<Vulnerability> vulnerabilities = new ArrayList<>();
            vulnerabilities.add(new Vulnerability("CVE-1999-0001"));
            vulnerabilities.add(new Vulnerability("CVE-1999-0002"));
            assertEquals(parser.parseVulnerability(cve.get(0)).getId(), vulnerabilities.get(0).getId());
            assertEquals(parser.parseVulnerability(cve.get(1)).getId(), vulnerabilities.get(1).getId());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
