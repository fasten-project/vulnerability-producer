/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.vulnerabilityproducer.parsers;

import eu.fasten.vulnerabilityproducer.*;
import eu.fasten.vulnerabilityproducer.utils.*;
import eu.fasten.vulnerabilityproducer.utils.connections.*;
import eu.fasten.vulnerabilityproducer.utils.mappers.*;
import eu.fasten.vulnerabilityproducer.utils.parsers.*;
import org.junit.jupiter.api.*;
import org.junit.jupiter.api.TestInstance.*;
import org.mockito.*;

import java.util.*;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.when;

@TestInstance(Lifecycle.PER_CLASS)
public class OSSFuzzParserTest {
    GitHelper gitHelperMock = Mockito.mock(GitHelper.class);
    String mnt = VulnerabilityProducerTest.testmnt;
    OSSFuzzParser ossFuzzParser = new OSSFuzzParser(mnt);
    HashMap<String, Vulnerability> vulnerabilities = null;
    String repoUrl = "https://github.com/google/oss-fuzz-vulns.git";

    @BeforeAll
    public void setGitHelperMock() {
        ossFuzzParser.setGitHelper(gitHelperMock);
        var pathToDir = mnt + "/parsers/oss-fuzz-vulns/";
        when(gitHelperMock.cloneRepo(repoUrl, pathToDir, null)).thenReturn(pathToDir);
        vulnerabilities = ossFuzzParser.getVulnerabilities();
    }

    @Test
    public void parseEntireVulnerability() {
        var vActual   = vulnerabilities.get("OSV-2021-205");
        var vExpected = new Vulnerability("OSV-2021-205");
        vExpected.setSeverity(Severity.HIGH);
        vExpected.setLastModifiedDate("2021-03-13");
        vExpected.setPublishedDate("2021-01-16");
        vExpected.addReference("https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=29610");
        vExpected.setDescription("Heap-use-after-free in lua_closeslot\n" +
                "OSS-Fuzz report: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=29610\n" +
                "\n" +
                "Crash type: Heap-use-after-free WRITE 1\n" +
                "Crash state:\n" +
                "lua_closeslot\n" +
                "luaL_traceback\n" +
                "msghandler\n");
        vExpected.addPatchLink("https://github.com/lua/lua/commit/2bfa13e520e53210b96ead88f49a9ca20c5a5d18");

        assertEquals(vExpected, vActual);
    }

    @Test
    public void parseCreatePurls() {
        var v = vulnerabilities.get("OSV-2020-2161");
        assertTrue(v.getPurls().contains("pkg:deb/debian/qemu@v5.2.0"));
        assertTrue(v.getPurls().contains("pkg:deb/debian/qemu@v5.2.0-rc1"));
        assertTrue(v.getPurls().contains("pkg:deb/debian/qemu@v5.2.0-rc2"));
        assertTrue(v.getPurls().contains("pkg:deb/debian/qemu@v5.2.0-rc3"));
        assertTrue(v.getPurls().contains("pkg:deb/debian/qemu@v5.2.0-rc4"));
    }

    @Test
    public void parseMultiplePatches() {
        var v = vulnerabilities.get("OSV-2018-227");
        assertTrue(v.getPatchLinks().contains("https://github.com/darktable-org/rawspeed/commit/212b7a8ea10acaaf722509e291ed1f59df8010df"));
        assertTrue(v.getPatchLinks().contains("https://github.com/darktable-org/rawspeed/commit/dbe7591e54bad5e6430d38be6bed051582da76b9"));
    }

    @Test
    public void parsePatchGitGeneric() {
        var v = vulnerabilities.get("OSV-2020-851");
        assertTrue(v.getPatchLinks().contains("https://git.code.sf.net?p=p;a=commit;h=7a1831b94a73f2cd665bd48f65c8516509d0740e"));
    }

    @Test
    public void parseSpecialCasesPatches() {
        var vQemu = vulnerabilities.get("OSV-2020-2161");
        var vWget = vulnerabilities.get("OSV-2018-280");

        assertTrue(vQemu.getPatchLinks().contains("https://github.com/qemu/qemu/commit/94a4f8167dd9dde35b27e1d82bdf6c2fa5071364"));
        assertTrue(vWget.getPatchLinks().contains("https://git.savannah.gnu.org/cgit/wget.git/commit/?id=b0f802c46c286f4e07c499042ba3e3ea15c2d585"));
    }
}
