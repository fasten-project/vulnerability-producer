/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.vulnerabilityproducer.parsers;

import com.mongodb.client.MongoDatabase;
import eu.fasten.vulnerabilityproducer.db.NitriteController;
import eu.fasten.vulnerabilityproducer.utils.PatchFinder;
import eu.fasten.vulnerabilityproducer.utils.Vulnerability;
import eu.fasten.vulnerabilityproducer.utils.connections.JavaHttpClient;
import eu.fasten.vulnerabilityproducer.utils.mappers.Severity;
import eu.fasten.vulnerabilityproducer.utils.parsers.*;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.HashMap;
import java.util.HashSet;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class ParserManagerTest {

    JavaHttpClient client = new JavaHttpClient();
    MongoDatabase dbMock = Mockito.mock(MongoDatabase.class);
    NitriteController ncMOck = Mockito.mock(NitriteController.class);
    ParserManager pm = new ParserManager(client, dbMock, ncMOck);
    GHParser ghParserMock = Mockito.mock(GHParser.class);
    NVDParser nvdParserMock = Mockito.mock(NVDParser.class);
    OVALParser ovalParserMock = Mockito.mock(OVALParser.class);
    ExtraParser extraParserMock = Mockito.mock(ExtraParser.class);
    PatchFinder patchFinderMock = Mockito.mock(PatchFinder.class);

    @Test
    public void testGetDataAndMergeFromParsers() {
        pm.injectParsers(
                nvdParserMock,
                ghParserMock,
                extraParserMock,
                ovalParserMock,
                patchFinderMock);

        HashMap<String, Vulnerability> nvdVulns = new HashMap<>();
        Vulnerability v1 = new Vulnerability("CVE-TEST-1");
        Vulnerability v2 = new Vulnerability("CVE-TEST-2");
        v1.setScoreCVSS2(7.5);
        v1.addPatchLink("patch_1");
        v2.setDescription("Another Vulnerability");
        v2.addPurl("pgk:pypi/django@1.0");

        nvdVulns.put(v1.getId(), v1);
        nvdVulns.put(v2.getId(), v2);

        HashMap<String, Vulnerability> ghVulns = new HashMap<>();
        Vulnerability v3 = new Vulnerability("CVE-TEST-1");
        Vulnerability v4 = new Vulnerability("CVE-TEST-2");
        Vulnerability v5 = new Vulnerability("CVE-TEST-3");
        v3.addPatchLink("patch_2");
        v4.addPurl("pgk:pypi/django@2.0");
        v5.addReference("ref_1");

        ghVulns.put(v3.getId(), v3);
        ghVulns.put(v4.getId(), v4);
        ghVulns.put(v5.getId(), v5);

        HashMap<String, Vulnerability> extraVulns = new HashMap<>();
        Vulnerability v6 = new Vulnerability("CVE-TEST-1");
        Vulnerability v7 = new Vulnerability("CVE-TEST-3");
        Vulnerability v8 = new Vulnerability("CVE-TEST-4");
        v6.setSeverity(Severity.CRITICAL);
        v7.addReference("ref_1");

        extraVulns.put(v6.getId(), v6);
        extraVulns.put(v7.getId(), v7);
        extraVulns.put(v8.getId(), v8);

        HashMap<String, Vulnerability> ovalVulns = new HashMap<>();
        Vulnerability v9 = new Vulnerability("CVE-TEST-5");

        ovalVulns.put(v9.getId(), v9);

        when(nvdParserMock.getVulnerabilities()).thenReturn(nvdVulns);
        when(ghParserMock.getVulnerabilities()).thenReturn(ghVulns);
        when(extraParserMock.getVulnerabilities()).thenReturn(extraVulns);
        when(ovalParserMock.getVulnerabilities()).thenReturn(ovalVulns);

        HashSet<Vulnerability> check = pm.getVulnerabilitiesFromParsers();
        // EXPECTED
        HashSet<Vulnerability> expected = new HashSet<>();
        Vulnerability vE1 = new Vulnerability("CVE-TEST-1");
        Vulnerability vE2 = new Vulnerability("CVE-TEST-2");
        Vulnerability vE3 = new Vulnerability("CVE-TEST-3");
        Vulnerability vE4 = new Vulnerability("CVE-TEST-4");
        Vulnerability vE5 = new Vulnerability("CVE-TEST-5");

        // CVE-TEST-1
        vE1.setScoreCVSS2(7.5);
        vE1.addPatchLink("patch_1");
        vE1.addPatchLink("patch_2");
        vE1.setSeverity(Severity.CRITICAL);

        // CVE-TEST-2
        vE2.setDescription("Another Vulnerability");
        vE2.addPurl("pgk:pypi/django@1.0");
        vE2.addPurl("pgk:pypi/django@2.0");

        // CVE-TEST-3
        vE3.addReference("ref_1");

        expected.add(vE1);
        expected.add(vE2);
        expected.add(vE3);
        expected.add(vE4);
        expected.add(vE5);

        assertEquals(expected, check);
    }

    @Test
    public void testGetUpdatesFromParser() {
        pm.injectParsers(
                nvdParserMock,
                ghParserMock,
                extraParserMock,
                ovalParserMock,
                patchFinderMock);

        HashMap<String, Vulnerability> nvdVulns = new HashMap<>();
        Vulnerability v1 = new Vulnerability("CVE-TEST-1");
        nvdVulns.put(v1.getId(), v1);

        HashMap<String, Vulnerability> ghVulns = new HashMap<>();
        Vulnerability v2 = new Vulnerability("CVE-TEST-2");
        ghVulns.put(v2.getId(), v2);

        HashMap<String, Vulnerability> extraVulns = new HashMap<>();
        Vulnerability v3 = new Vulnerability("CVE-TEST-3");
        extraVulns.put(v3.getId(), v3);

        HashMap<String, Vulnerability> ovalVulns = new HashMap<>();
        Vulnerability v4 = new Vulnerability("CVE-TEST-4");
        ovalVulns.put(v4.getId(), v4);

        when(nvdParserMock.getUpdates()).thenReturn(nvdVulns);
        when(ghParserMock.getUpdates()).thenReturn(ghVulns);
        when(extraParserMock.getUpdates()).thenReturn(extraVulns);
        when(ovalParserMock.getUpdates()).thenReturn(ovalVulns);

        HashSet<Vulnerability> check = pm.getUpdatesFromParsers();

        // EXPECTED
        HashSet<Vulnerability> expected = new HashSet<>();
        Vulnerability vE1 = new Vulnerability("CVE-TEST-1");
        Vulnerability vE2 = new Vulnerability("CVE-TEST-2");
        Vulnerability vE3 = new Vulnerability("CVE-TEST-3");
        Vulnerability vE4 = new Vulnerability("CVE-TEST-4");

        expected.add(vE1);
        expected.add(vE2);
        expected.add(vE3);
        expected.add(vE4);

        assertEquals(expected, check);
    }
}
