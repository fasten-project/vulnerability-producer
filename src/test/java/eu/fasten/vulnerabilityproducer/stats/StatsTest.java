/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.vulnerabilityproducer.stats;

import eu.fasten.vulnerabilityproducer.utils.Vulnerability;
import org.apache.commons.io.FileUtils;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.HashSet;

import static eu.fasten.vulnerabilityproducer.utils.stats.Stats.saveStats;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class StatsTest {

    final String pathToStatsFolder = "./src/test/resources/stats/";

    String out = "Summary\n" +
            "=======\n" +
            "References Info\n" +
            "---------------\n" +
            "| Base URL              | Count |\n" +
            "| --------------------- | -----:|\n" +
            "| https://github.com    |     2 |\n" +
            "| https://gitlab.com    |     1 |\n" +
            "| https://bitbucket.com |     1 |\n" +
            "General Info\n" +
            "------------\n" +
            "| Vulnerabilities               | Quantity |\n" +
            "| ----------------------------- | --------:|\n" +
            "| With PURL                     |        1 |\n" +
            "| With Patches                  |        2 |\n" +
            "| With Patches but no PURL      |        1 |\n" +
            "| With Patch Links but no patch |        1 |\n" +
            "| Total                         |        3 |";

    @Test
    public void saveStatsOfVulnsTest() throws IOException {
        var vulns = new HashSet<Vulnerability>();

        var v1 = new Vulnerability("V1");
        v1.addReference("https://github.com/repo/project/commit/sha1");
        v1.addReference("https://github.com/repo/project/commit/sha2");
        v1.addPatch(new Vulnerability.Patch("file.java", "2020-04-05"));
        v1.addPatchLink("patch1");
        v1.addPurl("pkg:oof/oof");
        vulns.add(v1);

        var v2 = new Vulnerability("V2");
        v2.addReference("https://gitlab.com/repo/project/commit/sha");
        v2.addPatchLink("patch2");
        vulns.add(v2);

        var v3 = new Vulnerability("V3");
        v3.addReference("https://bitbucket.com/repo/project/commit/sha");
        v3.addPatch(new Vulnerability.Patch("oof.java", "2020-04-05"));
        vulns.add(v3);

        saveStats(vulns, pathToStatsFolder);

        var actual = Files.readString(Path.of(pathToStatsFolder + "stats.md"));

        // Assert out
        assertEquals(out.replaceAll("\\r\\n", "\n"), actual.replaceAll("\\r\\n", "\n"));
        // Assert two files are saved
        var firstVulnFile = new File(pathToStatsFolder + "lbnp/V2.json");
        var secondVulnFile = new File(pathToStatsFolder + "pbnp/V3.json");
        assertTrue(firstVulnFile.exists());
        assertTrue(secondVulnFile.exists());

        // Delete everything else
        FileUtils.deleteQuietly(firstVulnFile);
        FileUtils.deleteQuietly(secondVulnFile);

        FileUtils.deleteQuietly(new File(pathToStatsFolder + "stats.md"));
        FileUtils.deleteQuietly(new File(pathToStatsFolder + "refs.txt"));
    }
}
