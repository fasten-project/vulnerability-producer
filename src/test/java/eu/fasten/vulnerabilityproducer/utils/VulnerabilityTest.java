package eu.fasten.vulnerabilityproducer.utils;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

class VulnerabilityTest {

    @Test
    void otherIsNull() {
        var v1 = new Vulnerability("CVE-2021-44228");
        Vulnerability v2 = null;
        assertThrows(IllegalArgumentException.class, () -> {v1.compareTo(v2);});
    }

    @Test
    void equalCves() {
        var v1 = new Vulnerability("CVE-2021-44228");
        var v2 = new Vulnerability("CVE-2021-44228");
        assertEquals(v1, v2);
        assertEquals(v2, v1);
        assertEquals(0, v1.compareTo(v2));
        assertEquals(0, v2.compareTo(v1));
    }

    @Test
    void cvesWithDifferentYears() {
        var v1 = new Vulnerability("CVE-2021-44228");
        var v2 = new Vulnerability("CVE-2019-44228");
        assertTrue(v1.compareTo(v2) < 0);
        assertTrue(v2.compareTo(v1) > 0);
    }

    @Test
    void cvesWithDifferentNumbers() {
        var v1 = new Vulnerability("CVE-2021-44229");
        var v2 = new Vulnerability("CVE-2021-44228");
        assertTrue(v1.compareTo(v2) < 0);
        assertTrue(v2.compareTo(v1) > 0);
    }

    @Test
    void cvesWithDifferentYearsAndNumbers() {
        var v1 = new Vulnerability("CVE-2021-44228");
        var v2 = new Vulnerability("CVE-2019-17571");
        assertTrue(v1.compareTo(v2) < 0);
        assertTrue(v2.compareTo(v1) > 0);
    }

    @Test
    void allMalformedCves() {
        var v1 = new Vulnerability("b");
        var v2 = new Vulnerability("a");
        var v3 = new Vulnerability("a");
        assertTrue(v1.compareTo(v2) > 0);
        assertTrue(v2.compareTo(v1) < 0);
        assertEquals(v2, v3);
    }

    @Test
    void oneMalformedCve() {
        var v1 = new Vulnerability("CVE-2021-44228");
        var v2 = new Vulnerability("b");
        var v3 = new Vulnerability("DSA");
        assertTrue(v1.compareTo(v2) < 0);
        assertTrue(v1.compareTo(v3) < 0);
        assertTrue(v2.compareTo(v1) > 0);
        assertTrue(v3.compareTo(v1) > 0);
        assertTrue(v2.compareTo(v3) > 0);
        assertTrue(v3.compareTo(v2) < 0);
    }
}