{
  "sha": "1e2aed64b7154e1786d866a3b5bdd4f36e9f492d",
  "node_id": "MDY6Q29tbWl0MjQ1NzU0MTQ6MWUyYWVkNjRiNzE1NGUxNzg2ZDg2NmEzYjViZGQ0ZjM2ZTlmNDkyZA==",
  "commit": {
    "author": {
      "name": "Eran Hammer",
      "email": "eran@hammer.io",
      "date": "2019-09-13T19:23:50Z"
    },
    "committer": {
      "name": "Eran Hammer",
      "email": "eran@hammer.io",
      "date": "2019-09-13T19:23:50Z"
    },
    "message": "Fix maxBytes. Closes #72",
    "tree": {
      "sha": "56b752b169d3f1817a87ed5a412e6eef3ba00e02",
      "url": "https://api.github.com/repos/hapijs/subtext/git/trees/56b752b169d3f1817a87ed5a412e6eef3ba00e02"
    },
    "url": "https://api.github.com/repos/hapijs/subtext/git/commits/1e2aed64b7154e1786d866a3b5bdd4f36e9f492d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/hapijs/subtext/commits/1e2aed64b7154e1786d866a3b5bdd4f36e9f492d",
  "html_url": "https://github.com/hapijs/subtext/commit/1e2aed64b7154e1786d866a3b5bdd4f36e9f492d",
  "comments_url": "https://api.github.com/repos/hapijs/subtext/commits/1e2aed64b7154e1786d866a3b5bdd4f36e9f492d/comments",
  "author": {
    "login": "hueniverse",
    "id": 56631,
    "node_id": "MDQ6VXNlcjU2NjMx",
    "avatar_url": "https://avatars2.githubusercontent.com/u/56631?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hueniverse",
    "html_url": "https://github.com/hueniverse",
    "followers_url": "https://api.github.com/users/hueniverse/followers",
    "following_url": "https://api.github.com/users/hueniverse/following{/other_user}",
    "gists_url": "https://api.github.com/users/hueniverse/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hueniverse/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hueniverse/subscriptions",
    "organizations_url": "https://api.github.com/users/hueniverse/orgs",
    "repos_url": "https://api.github.com/users/hueniverse/repos",
    "events_url": "https://api.github.com/users/hueniverse/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hueniverse/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hueniverse",
    "id": 56631,
    "node_id": "MDQ6VXNlcjU2NjMx",
    "avatar_url": "https://avatars2.githubusercontent.com/u/56631?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hueniverse",
    "html_url": "https://github.com/hueniverse",
    "followers_url": "https://api.github.com/users/hueniverse/followers",
    "following_url": "https://api.github.com/users/hueniverse/following{/other_user}",
    "gists_url": "https://api.github.com/users/hueniverse/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hueniverse/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hueniverse/subscriptions",
    "organizations_url": "https://api.github.com/users/hueniverse/orgs",
    "repos_url": "https://api.github.com/users/hueniverse/repos",
    "events_url": "https://api.github.com/users/hueniverse/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hueniverse/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5e4012482d09b46680209858dfe406876d30da1b",
      "url": "https://api.github.com/repos/hapijs/subtext/commits/5e4012482d09b46680209858dfe406876d30da1b",
      "html_url": "https://github.com/hapijs/subtext/commit/5e4012482d09b46680209858dfe406876d30da1b"
    }
  ],
  "stats": {
    "total": 35,
    "additions": 33,
    "deletions": 2
  },
  "files": [
    {
      "sha": "f68aa7f5551387c07372b6d261bf4df8179223b5",
      "filename": "lib/index.js",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/hapijs/subtext/blob/1e2aed64b7154e1786d866a3b5bdd4f36e9f492d/lib/index.js",
      "raw_url": "https://github.com/hapijs/subtext/raw/1e2aed64b7154e1786d866a3b5bdd4f36e9f492d/lib/index.js",
      "contents_url": "https://api.github.com/repos/hapijs/subtext/contents/lib/index.js?ref=1e2aed64b7154e1786d866a3b5bdd4f36e9f492d",
      "patch": "@@ -306,7 +306,7 @@ internals.writeFile = function (req, options, stream) {\n \n         const path = File.uniqueFilename(options.uploads || Os.tmpdir());\n         const file = Fs.createWriteStream(path, { flags: 'wx' });\n-        const counter = new internals.Counter();\n+        const counter = new internals.Counter(options);\n \n         const finalize = (err) => {\n \n@@ -404,15 +404,23 @@ internals.pipe = function (from, to) {\n \n internals.Counter = class extends Stream.Transform {\n \n-    constructor() {\n+    constructor(options) {\n \n         super();\n         this.bytes = 0;\n+        this._maxBytes = options.maxBytes;\n     }\n \n     _transform(chunk, encoding, next) {\n \n         this.bytes = this.bytes + chunk.length;\n+\n+        if (this._maxBytes !== undefined &&\n+            this.bytes > this._maxBytes) {\n+\n+            return next(Boom.entityTooLarge('Payload content length greater than maximum allowed: ' + this._maxBytes));\n+        }\n+\n         return next(null, chunk);\n     }\n };"
    },
    {
      "sha": "ff2e5319bc7508bb34a0d3f1f971e43483829d81",
      "filename": "test/index.js",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/hapijs/subtext/blob/1e2aed64b7154e1786d866a3b5bdd4f36e9f492d/test/index.js",
      "raw_url": "https://github.com/hapijs/subtext/raw/1e2aed64b7154e1786d866a3b5bdd4f36e9f492d/test/index.js",
      "contents_url": "https://api.github.com/repos/hapijs/subtext/contents/test/index.js?ref=1e2aed64b7154e1786d866a3b5bdd4f36e9f492d",
      "patch": "@@ -164,6 +164,29 @@ describe('parse()', () => {\n         expect(err.output.statusCode).to.equal(413);\n     });\n \n+    it('errors when content-length header greater than maxBytes (file)', async () => {\n+\n+        const body = '{\"x\":\"1\",\"y\":\"2\",\"z\":\"3\"}';\n+        const request = Wreck.toReadableStream(body);\n+        request.headers = {\n+            'content-type': 'application/json'\n+        };\n+\n+        const err = await expect(Subtext.parse(request, null, { parse: false, output: 'file', maxBytes: 10 })).to.reject('Payload content length greater than maximum allowed: 10');\n+        expect(err.output.statusCode).to.equal(413);\n+    });\n+\n+    it('allows file within the maxBytes limit', async () => {\n+\n+        const body = '{\"x\":\"1\",\"y\":\"2\",\"z\":\"3\"}';\n+        const request = Wreck.toReadableStream(body);\n+        request.headers = {\n+            'content-type': 'application/json'\n+        };\n+\n+        await expect(Subtext.parse(request, null, { parse: false, output: 'file', maxBytes: 100 })).to.not.reject();\n+    });\n+\n     it('limits maxBytes when content-length header missing', async () => {\n \n         const body = '{\"x\":\"1\",\"y\":\"2\",\"z\":\"3\"}';"
    }
  ]
}